var view_path="views/",pcolor="#1C536F",_bimay_url="http://binusmaya.binus.ac.id",_bimay_api_url="http://apps.binusmaya.binus.ac.id",app=angular.module("BinusMaya",["ionic","listRoute","BinusMayaFactory"]).run(["$ionicPlatform","$rootScope","$ionicHistory","$ionicNavBarDelegate","BinusMaya","$timeout",function(t,e,n,a,o,i){e.login="undefined"==typeof localStorage.islogin?!1:localStorage.islogin,e.leftMenu=!1,e.profilePicture=!1,e.loginName="undefined"==typeof localStorage.fname?null:localStorage.fname.toLowerCase(),delete localStorage.cookie,delete localStorage.templogin,t.ready(function(){e.onLoadStyle={opacity:1},window.StatusBar&&StatusBar.styleDefault(),localStorage.islogin&&r()}),e.getLastUpdate=function(){e.lastUpdate="undefined"==typeof localStorage.lastUpdate?"Whatever":localStorage.lastUpdate},e.getLastUpdate(),e.logout=function(){localStorage.clear(),window.location.hash="#/",n.clearHistory(),a.showBackButton(!1),location.reload()};var r=function(){localStorage.profilePicture?e.profilePicture=localStorage.profilePicture:"undefined"==typeof httpclient||o.profilePicture().then(function(t){i(function(){localStorage.profilePicture=t,e.profilePicture=t})},function(){})};window.location.hash=e.login?"/schedule":"/"}]).config(["$ionicConfigProvider",function(t){t.views.forwardCache(!1),t.views.maxCache(0)}]);angular.module("BinusMayaFactory",[]).factory("BinusMaya",["$q","$ionicPopup",function(t,e){return{_bimay_url:"http://binusmaya.binus.ac.id",_bimay_api_url:"http://apps.binusmaya.binus.ac.id",headers:function(){var t=this;return{Cookie:localStorage.cookie?localStorage.cookie:null,Origin:t._bimay_url,Referer:t._bimay_url}},checkLogin:function(){var e=this,n=localStorage.loginId?JSON.parse(localStorage.loginId):!1;return t(function(t,a){if(localStorage.templogin===!0)t(!0);else{if(n!==!1)return e.api("/","get").then(function(t){200!==t.code&&a(t);var o={};return $($(t.result).serializeArray()).each(function(t,e){o[e.name]=e.value}),o.txtUserId=n.binusid,o.txtPassword=n.password,o.btnLogin="Log In ",e.api("/","post",o)},a).then(function(){localStorage.templogin=!0,t(!0)},a);a("please login")}})},api:function(e,n,a,o,i){var r=this,c={headers:r.headers()};return"undefined"!=typeof i&&(c.noRedirect=!0),"none"==navigator.connection.type?t(function(t,e){e("No internet connection")}):void 0===localStorage.cookie?r._getCookie().then(function(){return r.api(e,n,a)}):t(function(t,i){"get"===n?httpclient.get(o?e:r._bimay_url+e,function(e){t(e)},function(t){i(t)},c):httpclient.post(o?e:r._bimay_url+e,a,function(e){t(e)},function(t){i(t)},c)})},download:function(e,n){var a=this;return t(function(t,o){return a.api(a._bimay_api_url+"/LMS/"+e,"get",{},!0).then(function(t){var o={};return $($(t.result).serializeArray()).each(function(t,e){o[e.name]=e.value}),o[n+".x"]=1,o[n+".y"]=1,a.api(a._bimay_api_url+"/LMS/"+e,"post",o,!0,!0)},o).then(function(t){o(t)},function(e){302==e.code?t(e):o(e)})})},frame:function(e){var n=this,a="";return t(function(t,o){return n.api(e,"get").then(function(t){return n.api($(t.result).find("#ctl00_cp1_ifrApp").attr("src"),"get")},o).then(function(t){return a=$(t.result).find("#ifrApp").attr("src"),n.api(a,"get",{},!0)},o).then(function(e){t({url:a,result:e})},o)})},_getCookie:function(){var e=this;return t(function(t,n){httpclient.get(e._bimay_url,function(e){200==e.code?(localStorage.cookie=e.header["Set-Cookie"],t(!0)):n(e)},n)})},profilePicture:function(){var e=this;return t(function(t,n){e.checkLogin().then(function(){return e.frame("/")},n).then(function(a){var o=$(a.result.result).find("#ctl00_cpRight_ucPhoto_imgProfilePic").attr("src");httpclient.image(e._bimay_api_url+"/home/"+o,function(e){t("data:image/jpeg;base64,"+e.result.replace(/(\r\n|\n|\r)/gm,""))},n,{headers:e.headers()})},n)})},promptPassword:function(t,n){n.promptPass={};var a=e.show({template:'<p ng-show="promptPass.error">Incorrect Password</p><input type="password" class="promptPass-form" ng-model="promptPass.password">',title:"Enter Binusmaya Password",subTitle:"",scope:n,buttons:[{text:"Cancel",onTap:function(){window.location.hash="#/"+t,a.close()}},{text:"<b>Enter</b>",type:"button-positive",onTap:function(t){var e=JSON.parse(localStorage.loginId).password;return e==n.promptPass.password?(n.promptPass={},n.isAllow=!0,!0):(n.promptPass.error=!0,n.promptPass.password="",t.preventDefault(),void 0)}}]})},_requestError:function(){},grouping:function(t){if(t.length<=0)return[];var e=[],n="",a=-1,o=0;return t.forEach(function(t){n==t.date?(e[a].data[o]=t,o++):(o=1,a++,n=t.date,e[a]={date:t.date,data:[]},e[a].data[0]=t)}),e}}}]),angular.module("listRoute",[]).config(["$stateProvider","$urlRouterProvider",function(t,e){t.state("index",{url:"/",views:{"main-view":{templateUrl:view_path+"login.html"}}}).state("schedule",{url:"/schedule",views:{"main-view":{templateUrl:view_path+"schedule.html",controller:"ScheduleController"}}}).state("about",{url:"/about",views:{"main-view":{templateUrl:view_path+"about.html"}}}).state("forum",{url:"/forum",views:{"main-view":{templateUrl:view_path+"forum.html",controller:"ForumController"}}}).state("services",{url:"/services",views:{"main-view":{templateUrl:view_path+"services/index.html",controller:"ServicesController"}}}).state("myclass",{url:"/myclass",views:{"main-view":{templateUrl:view_path+"myclass.html",controller:"MyClassController"}}}).state("myclassDetail",{url:"/myclass-detail/:code",resolve:{dataset:["$q","$stateParams","$location",function(t,e,n){var a=!1,o=t.defer(),i="undefined"!=typeof localStorage.myClass?JSON.parse(localStorage.myClass):!1;for(var r in i)i[r].code==e.code&&(a=r);return a?o.resolve(a):n.path("/myclass").replace(),o.promise}]},views:{"main-view":{templateUrl:view_path+"myclassInside.html",controller:"MyClassDetailController"}}}).state("examSchedule",{url:"/exam-schedule",views:{"main-view":{templateUrl:view_path+"services/exam-schedule.html",controller:"ExamScheduleController"}}}).state("examScore",{url:"/exam-score",views:{"main-view":{templateUrl:view_path+"services/exam-score.html",controller:"ExamScoreController"}}}).state("financeStatus",{url:"/finance-status",views:{"main-view":{templateUrl:view_path+"services/billing.html",controller:"FinanceController"}}}).state("absence",{url:"/absence",views:{"main-view":{templateUrl:view_path+"services/absence.html",controller:"AbsenceController"}}}).state("coming",{url:"/coming",views:{"main-view":{templateUrl:view_path+"coming.html"}}}),e.otherwise("/coming")}]),app.controller("AbsenceController",["$scope","BinusMaya","$ionicNavBarDelegate","$state","$http","$location","$stateParams","$timeout","$rootScope","$ionicPlatform","$q","$ionicPopup",function(t,e,n,a,o,i,r,c,l,s,u,f){t.doRefresh=function(){d().then(function(e){t.$applyAsync(function(){e.length>0&&(localStorage.absence=JSON.stringify(e),t.absence=e),t.$broadcast("scroll.refreshComplete")})},function(e){p(e),t.$broadcast("scroll.refreshComplete")})};var d=function(){return u(function(t,n){var a=function(t){function e(t){return/baik/.test(t)?"balanced":/warning/.test(t)?"calm":/maximum/.test(t)?"energized":/overlimit/.test(t)?"assertive":void 0}var n=[],a=0;return $(t).find("#rptTable tr").each(function(t){var o=$(this).find("td");t>0&&(o.length>=8?(n[a]={name:o.eq(0).html(),absence:[{max:o.eq(3).html(),total:o.eq(4).html(),component:o.eq(2).text(),status:e(o.eq(5).find("img").attr("src"))}]},a++):n[a-1].absence.push({max:o.eq(2).html(),total:o.eq(3).html(),component:o.eq(1).text(),status:e(o.eq(4).find("img").attr("src"))}))}),n};"undefined"==typeof httpclient?o.get("http://localhost:2505/absence.html").then(function(e){t(a(e.data))},n):e.checkLogin().then(function(){return e.api("/","get")},function(){return u.reject("can't re-auth your account")}).then(function(t){return e.frame($(t.result).find(".itemContent ul li:eq(3) > a").attr("href"))},function(){return u.reject("can't access to main frame")}).then(function(t){return e.api($(t.result.result).find("#ctl00_cpContent_rptMainMenuStudent_ctl01_linkMenuStudent").attr("href"),"get",{},!0)},function(){return u.reject("can't access to main frame")}).then(function(t){return e.api($(t.result).find("#ctl00_cpContent_rptSubMenu_ctl02_linkSubMenu").attr("href"),"get",{},!0)},function(){return u.reject("can't access to main frame")}).then(function(e){t(a(e.result))},function(t){n(t)})})};t.absence=!1,"undefined"!=typeof localStorage.absence&&(t.absence=JSON.parse(localStorage.absence));var p=function(e){f.alert({title:"Oops !",template:e}),t.$broadcast("scroll.refreshComplete")}}]),app.controller("ExamScheduleController",["$scope","BinusMaya","$ionicNavBarDelegate","$state","$http","$location","$stateParams","$timeout","$rootScope","$ionicPlatform","$q","$ionicPopup",function(t,e,n,a,o,i,r,c,l,s,u,f){t.doRefresh=function(){d().then(function(e){t.$applyAsync(function(){e.length>0&&(localStorage.examSchedule=JSON.stringify(e),t.examScheduleList=e),t.$broadcast("scroll.refreshComplete")})},function(e){p(e),t.$broadcast("scroll.refreshComplete")})};var d=function(){return u(function(t,n){var a=function(t){for(var n=[],a=0;a<t.length;a++){var o=$(t[a]).find("table:eq(2) tr td li").text();$(t[a]).find(".tablewithborder tr").each(function(t,e){t>0&&n.push({term:o,code:$(e).find("td").eq(0).text(),name:$(e).find("td").eq(1).text(),sks:$(e).find("td").eq(2).text(),date:$(e).find("td").eq(3).text(),hour:$(e).find("td").eq(4).text(),room:$(e).find("td").eq(5).text(),campus:$(e).find("td").eq(6).text(),className:$(e).find("td").eq(7).text(),seat:parseInt($(e).find("td").eq(8).text())})})}return e.grouping(_.sortBy(n,"date"))},i=[],r="";"undefined"==typeof httpclient?o.get("http://localhost:2505/exam.html").then(function(t){return i.push(t.data),o.get("http://localhost:2505/exam-practicum.html")},n).then(function(e){i.push(e.data),t(a(i))},n):e.checkLogin().then(function(){return e.api("/","get")},function(){return u.reject("can't re-auth your account")}).then(function(t){return e.frame($(t.result).find(".itemContent ul li:eq(3) > a").attr("href"))},function(){return u.reject("can't access to main frame")}).then(function(t){return e.api($(t.result.result).find("#ctl00_cpContent_rptMainMenuStudent_ctl02_linkMenuStudent").attr("href"),"get",{},!0)},function(){return u.reject("can't access to main frame")}).then(function(t){return r=t.result,e.api($(r).find(".itemContentService li:eq(0) a").attr("href"),"get",{},!0)},function(){return u.reject("can't access to main frame")}).then(function(t){return i.push(t.result),e.api($(r).find(".itemContentService li:eq(1) a").attr("href"),"get",{},!0)},function(){return u.reject("can't access to main frame")}).then(function(t){return i.push(t.result),e.api($(r).find(".itemContentService li:eq(2) a").attr("href"),"get",{},!0)},function(){return u.reject("can't access to main frame")}).then(function(e){i.push(e.result),t(a(i))},function(t){n(t)})})};t.examScheduleList=!1,"undefined"!=typeof localStorage.examSchedule&&(t.examScheduleList=JSON.parse(localStorage.examSchedule));var p=function(e){f.alert({title:"Oops !",template:e}),t.$broadcast("scroll.refreshComplete")}}]),app.controller("FinanceController",["$scope","BinusMaya","$ionicPopup","$q","$http",function(t,e,n,a,o){t.isAllow=!1,t.doRefresh=function(){i().then(function(e){t.$applyAsync(function(){t.financeList=e,t.$broadcast("scroll.refreshComplete")})},function(e){r(e),t.$broadcast("scroll.refreshComplete")})},t.toMoney=function(t){try{return t.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")}catch(e){return 0}};var i=function(){return a(function(t,n){var i=function(t){var n=0;try{n=parseInt($(t).find("table:eq(0) tr td").html().match(/[0-9]+/)[0])}catch(a){}var o=[];$(t).find("table#rptTable tr").each(function(t){var e=$(this).find("td");t>0&&o.push({date:e.eq(1).html(),title:e.eq(2).html(),term:e.eq(3).html(),due:e.eq(4).html(),charge:isNaN(parseInt(e.eq(5).html()))===!0?0:parseInt(e.eq(5).html()),payment:isNaN(parseInt(e.eq(6).html()))===!0?0:parseInt(e.eq(6).html().match(/[0-9]+/)),refund:isNaN(parseInt(e.eq(7).html()))===!0?0:parseInt(e.eq(7).html())})});var i={data:e.grouping(o),billing:n,lastUpdate:moment().format("D MMMM YYYY h:mm:ss")};return localStorage.finance=JSON.stringify(i),i};"undefined"==typeof httpclient?o.get("http://localhost:2505/finance.html").then(function(e){t(i(e.data))},n):e.checkLogin().then(function(){return e.api("/","get")},function(){return a.reject("can't re-auth your account")}).then(function(t){return e.frame($(t.result).find(".itemContent ul li:eq(3) > a").attr("href"))},function(){return a.reject("can't access to main frame")}).then(function(t){return e.api($(t.result.result).find("#ctl00_cpContent_rptMainMenuStudent_ctl06_linkMenuStudent").attr("href"),"get",{},!0)},function(){return a.reject("can't access to main frame")}).then(function(t){return e.api($(t.result).find("#ctl00_cpContent_rptSubMenu_ctl03_linkSubMenu").attr("href"),"get",{},!0)},function(){return a.reject("can't access to main frame")}).then(function(e){t(i(e.result))},function(){n("can't access to main frame")})})};t.financeList=!1,"undefined"!=typeof localStorage.finance&&(t.financeList=JSON.parse(localStorage.finance));var r=function(e){n.alert({title:"Oops !",template:e}),t.$broadcast("scroll.refreshComplete")};e.promptPassword("services",t)}]),app.controller("LoginController",["$scope","$ionicPopup","$timeout","$ionicHistory","$ionicNavBarDelegate","$rootScope","BinusMaya",function(t,e,n,a,o,i,r){i.noHeader=!0,o.showBar(!1),t.loading=!1,t.loginClass="",a.nextViewOptions({disableBack:!0}),t.submit=function(){if(t.binusid&&t.password){t.loginClass="on-loading",t.loading=!0,r.api("/","get").then(function(e){200!==e.code&&n(e);var a={};return $($(e.result).serializeArray()).each(function(t,e){a[e.name]=e.value}),a.txtUserId=t.binusid,a.txtPassword=t.password,a.btnLogin="Log In ",r.api("/","post",a)},function(t){n(t)}).then(function(e){var r=$(e.result).find("#content #topbar .right strong");200!==e.code&&n(e),r.length<=0?n(e,$(e.result).find("#lblError").text()):(t.loading=!1,t.loginClass="",localStorage.loginId=JSON.stringify({binusid:t.binusid,password:t.password}),localStorage.islogin=!0,localStorage.fname=r.text(),i.login=!0,i.loginName=localStorage.fname.toLowerCase(),t.loginClass="",t.loading=!1,location.reload(),a.clearHistory(),o.showBackButton(!1))},n);var n=function(n,a){t.loading=!1,t.loginClass="",e.alert({title:"Oops !",template:a?a:"Something wrong !"})}}else e.alert({title:"Oops !",template:"Please Input Binusian ID and Password"})}}]),app.controller("MyClassController",["$scope","BinusMaya","$ionicNavBarDelegate","$state","$location","$stateParams","$timeout","$rootScope","$ionicPlatform","$q","$ionicPopup","$ionicLoading","$http",function(t,e,n,a,o,i,r,c,l,s,u,f,d){c.noHeader=!1,c.leftMenu=!0,l.onHardwareBackButton(function(t){t.preventDefault()}),t.classData="undefined"!=typeof localStorage.myClass?JSON.parse(localStorage.myClass):!1;var p=function(){return s(function(t,n){var a=function(t){var e=[];return $(t).find("#ctl00_ContentPlaceHolder1_pnlTeori ul li").each(function(t,n){var a=$(n).find("a").html(),o=a.match(/^(.*)-(.*) \((.*)\)/i);e.push({indexItem:t,name:o[2],url:$(n).find("a").attr("href"),code:o[1],className:o[3]})}),localStorage.myClass=JSON.stringify(e),e};"undefined"==typeof httpclient?d.get("http://localhost:2505/myclass.html").then(function(e){t(a(e.data))},n):e.checkLogin().then(function(){return e.api("/","get")},function(){return s.reject("can't re-auth your account")}).then(function(t){return e.frame($(t.result).find(".itemContent ul li:eq(0) > a").attr("href"))},function(){return s.reject("can't access to main frame")}).then(function(e){t(a(e.result.result))},function(){n("can't access to my class")})})};t.doRefresh=function(){p().then(function(e){t.classData=e,f.hide(),t.$broadcast("scroll.refreshComplete")},function(t){e(t)});var e=function(e){f.hide(),u.alert({title:"Oops !",template:e}),t.$broadcast("scroll.refreshComplete")}},t.classData||(f.show({templateUrl:"views/module/loading.html",noBackdrop:!0}),t.doRefresh())}]),app.controller("MyClassDetailController",["$scope","BinusMaya","$ionicNavBarDelegate","$state","$location","$http","$ionicScrollDelegate","$stateParams","$timeout","$rootScope","$ionicPlatform","$q","$ionicPopup","dataset","$timeout","$ionicLoading",function(t,e,n,a,o,i,r,c,l,s,u,f,d,p,l,m){t.classData="undefined"!=typeof localStorage.myClass?JSON.parse(localStorage.myClass):!1,t.state={isData:!1,loading:!0},t.data=t.classData[p],t.showpage=0,t.linksSetAssigment=[],t.linksSet=[];var h=function(t){return f(function(n,a){var o=function(t){var e=$(t).find("#desc_course_desc > span").html(),n=$(t).find("#desc_grad_compete > span").html(),a=[],o=[];return $(t).find("#ctl00_ContentPlaceHolder1_pnlContentTheory table tbody tr").each(function(t,e){0!==t&&a.push({session:parseInt($(e).find("td:eq(0) > span").html()),mode:$(e).find("td:eq(1) > span").html(),topics:$(e).find("td:eq(2) > a").html(),date:$(e).find("td:eq(3) > span").html(),links:$(e).find("td:eq(4) > input").attr("name")})}),$(t).find("#ctl00_ContentPlaceHolder1_pnlMainAssignment table tbody tr").each(function(t,e){0!==t&&o.push({term:"Main Assigment",session:parseInt($(e).find("td").eq(0).text()),topics:$(e).find("td").eq(1).text(),title:$(e).find("td").eq(2).text(),desc:$(e).find("td").eq(3).text(),deadline:$(e).find("td").eq(4).text(),upload:$(e).find("td").eq(5).find("img").length?!0:!1,checked:$(e).find("td").eq(6).find("img").length?!0:!1,link:$(e).find("td").eq(7).find("input:eq(0)").attr("name")})}),$(t).find("#ctl00_ContentPlaceHolder1_pnlAdditionalAssignment2 table tbody tr").each(function(t,e){0!==t&&o.push({term:"Additional Assigment",session:parseInt($(e).find("td").eq(0).text()),topics:$(e).find("td").eq(1).text(),title:$(e).find("td").eq(2).text(),desc:$(e).find("td").eq(3).text(),deadline:$(e).find("td").eq(4).text(),upload:$(e).find("td").eq(5).find("img").length?!0:!1,checked:$(e).find("td").eq(6).find("img").length?!0:!1,link:$(e).find("td").eq(7).find("input:eq(0)").attr("name")})}),{main_description:e,grad_description:n,assigment:o.length>0?o:!1,course:a}};"undefined"==typeof httpclient?i.get("http://localhost:2505/myclass-inside.html").then(function(t){n(o(t.data))},a):e.checkLogin().then(function(){return e.api("/","get")},function(){return f.reject("can't re-auth your account")}).then(function(t){return e.frame($(t.result).find(".itemContent ul li:eq(0) > a").attr("href"))},function(){return f.reject("can't access to main frame")}).then(function(){return e.api(_bimay_api_url+"/LMS/"+t,"get",{},!0)},function(){return f.reject("can't access to my class")}).then(function(t){n(o(t.result))},function(){a("can't access to course page")})})};"undefined"==typeof t.classData[p].detail?h(t.classData[p].url).then(function(e){t.classData[p].detail=e,localStorage.myClass=JSON.stringify(t.classData),t.$applyAsync(function(){t.state.loading=!1,t.state.isData=t.classData[p].detail}),t.$broadcast("scroll.refreshComplete")},g):(t.state.loading=!1,t.state.isData=t.classData[p].detail),t.switchTab=function(e){t.showpage=e,setTimeout(function(){r.resize()},100)};var g=function(e){d.alert({title:"Oops !",template:e}),t.$broadcast("scroll.refreshComplete")};t.downloadCourse=function(e,n){t.linksSet[e]={isLoading:!0},v(n).then(function(n){window.open(n,"_system"),t.linksSet[e]={isLoading:!1}},function(){t.linksSet[e]={isLoading:!1}})},t.downloadAssigment=function(e,n){t.linksSetAssigment[e]={isLoading:!0},v(n).then(function(n){window.open(n,"_system"),t.linksSetAssigment[e]={isLoading:!1}},function(){t.linksSetAssigment[e]={isLoading:!1}})};var v=function(n){return f(function(a,o){e.checkLogin().then(function(){return e.api("/","get")},function(){return f.reject("can't re-auth your account")}).then(function(t){return e.frame($(t.result).find(".itemContent ul li:eq(0) > a").attr("href"))},function(){return f.reject("can't access to main frame")}).then(function(){return e.download(t.classData[p].url,n)},function(){return f.reject("can't access to my class")}).then(function(t){a(t.header.Location)},function(t){o(t)})})};t.refresh=function(){m.show({template:'<ion-spinner icon="android" class="overlay-spinner"></ion-spinner> Loading...'}),h(t.classData[p].url).then(function(e){console.log(e),t.classData[p].detail=e,localStorage.myClass=JSON.stringify(t.classData),t.$applyAsync(function(){t.state.loading=!1,t.state.isData=t.classData[p].detail}),m.hide(),r.resize()},function(t){m.hide(),g(t)})}}]),app.controller("ScheduleController",["$scope","$ionicPopup","$timeout","$ionicHistory","$rootScope","$ionicPlatform","BinusMaya","$q","$http","$ionicLoading",function(t,e,n,a,o,i,r,c,l,s){o.noHeader=!1,o.leftMenu=!0,i.onHardwareBackButton(function(t){t.preventDefault()}),t.getState=function(t){var e=moment();return moment(t).isSame(e,"day")?"today":moment(t).isSame(e.add(1,"d"),"day")?"tomorrow":moment(t)<e?"completo":void 0},t.getCourseState=function(t,e){var n=moment(),a=null;try{var o=e.split("-")[1].split(":"),i=parseInt(o[0]),r=parseInt(o[1]);a=moment(t).hour(i).minute(r)}catch(c){a=moment(t)}return n>a?"completo":void 0},t.isSchedule=!1,t.schedule=[];var u=function(t){var e=[];return $(t).find("tr").each(function(t){var n=$(this).find("td");if(t>0){var a=n.eq(3).html().match(/(.*)-(.*)/);e.push({date:n.eq(0).html(),time:n.eq(1).html(),state:n.eq(2).html(),course:a[2],code:a[1],myClass:n.eq(5).html(),room:n.eq(6).html(),building:n.eq(7).html()})}}),e},f=function(){return c(function(t,e){var n=function(t){var e=$(t).find("table"),n=u(e.eq(0).html()),a=u(e.eq(1).html()),o=n.concat(a),i=r.grouping(o);return i.length>0&&(localStorage.jadwal=JSON.stringify(i)),localStorage.lastUpdate=moment().format("D MMMM YYYY h:mm:ss"),{jadwal:i,lastUpdate:localStorage.lastUpdate}};"undefined"==typeof httpclient?l.get("http://localhost:2505/schedule.html").then(function(e){t(n(e.data))},e):r.checkLogin().then(function(){return r.api("/","get")},function(){return c.reject("can't re-auth your account")}).then(function(t){return r.frame($(t.result).find(".itemContent ul li:eq(0) > a").attr("href"))},function(){return c.reject("can't access to main frame")}).then(function(t){var e={},n=t.result;return $($(n.result).serializeArray()).each(function(t,n){e[n.name]=n.value}),e.__EVENTTARGET="ctl00$ContentPlaceHolder1$btnSchedule",r.api(_bimay_api_url+"/LMS/MyClass.aspx","post",e,!0)},function(){return c.reject("can't access to schedule page")}).then(function(e){t(n(e.result))},function(t){e(t)})})};if(t.doRefresh=function(){f().then(function(e){s.hide(),t.$broadcast("scroll.refreshComplete"),o.getLastUpdate(),t.isSchedule=!0,t.schedule=e.jadwal},function(t){n(t)});var n=function(n){s.hide(),e.alert({title:"Oops !",template:n}),t.$broadcast("scroll.refreshComplete")}},localStorage.jadwal)try{JSON.parse(localStorage.jadwal).length>0&&(t.isSchedule=!0,t.schedule=JSON.parse(localStorage.jadwal))}catch(d){}else i.ready(function(){s.show({templateUrl:"views/module/loading.html",noBackdrop:!0}),t.doRefresh()})}]),app.controller("ServicesController",["$scope","BinusMaya","$ionicNavBarDelegate",function(){}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImJpbnVzbWF5YS5qcyIsInJvdXRlLmpzIiwiY29udHJvbGxlcnMvYWJzZW5jZS5jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvZXhhbVNjaGVkdWxlLmNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9maW5hbmNlLmNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9sb2dpbi5jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvbXljbGFzcy5jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvbXljbGFzc0luc2lkZS5jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvc2NoZWR1bGUuY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3NlcnZpY2VzLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsR0FBQSxXQUFBLFNBQ0EsT0FBQSxVQUNBLFdBQUEsK0JBQ0EsZUFBQSxvQ0FFQSxJQUFBLFFBQUEsT0FBQSxhQUFBLFFBQUEsWUFBQSxxQkFFQSxLQUFBLGlCQUFBLGFBQUEsZ0JBQUEsdUJBQUEsWUFBQSxXQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBRUEsRUFBQSxNQUFBLG1CQUFBLGNBQUEsU0FBQSxFQUFBLGFBQUEsUUFDQSxFQUFBLFVBQUEsRUFDQSxFQUFBLGdCQUFBLEVBQ0EsRUFBQSxVQUFBLG1CQUFBLGNBQUEsTUFBQSxLQUFBLGFBQUEsTUFBQSxvQkFDQSxjQUFBLGFBQ0EsY0FBQSxVQUVBLEVBQUEsTUFBQSxXQUNBLEVBQUEsYUFDQSxRQUFBLEdBT0EsT0FBQSxXQUNBLFVBQUEsZUFFQSxhQUFBLFNBQ0EsTUFJQSxFQUFBLGNBQUEsV0FDQSxFQUFBLFdBQUEsbUJBQUEsY0FBQSxXQUFBLFdBQUEsYUFBQSxZQUVBLEVBQUEsZ0JBQ0EsRUFBQSxPQUFBLFdBQ0EsYUFBQSxRQUNBLE9BQUEsU0FBQSxLQUFBLEtBQ0EsRUFBQSxlQUNBLEVBQUEsZ0JBQUEsR0FDQSxTQUFBLFNBR0EsSUFBQSxHQUFBLFdBRUEsYUFBQSxlQUNBLEVBQUEsZUFBQSxhQUFBLGVBRUEsbUJBQUEsYUFFQSxFQUFBLGlCQUNBLEtBQUEsU0FBQSxHQUNBLEVBQUEsV0FDQSxhQUFBLGVBQUEsRUFDQSxFQUFBLGVBQUEsS0FFQSxjQVNBLFFBQUEsU0FBQSxLQURBLEVBQUEsTUFDQSxZQUVBLE9BSUEsUUFBQSx1QkFBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLGNBQUEsR0FDQSxFQUFBLE1BQUEsU0FBQSxLQ3JGQSxTQUFBLE9BQUEsdUJBRUEsUUFBQSxhQUFBLEtBQUEsY0FBQSxTQUFBLEVBQUEsR0FDQSxPQUVBLFdBQUEsK0JBQ0EsZUFBQSxvQ0FFQSxRQUFBLFdBQ0EsR0FBQSxHQUFBLElBQ0EsUUFDQSxPQUFBLGFBQUEsT0FBQSxhQUFBLE9BQUEsS0FDQSxPQUFBLEVBQUEsV0FDQSxRQUFBLEVBQUEsYUFHQSxXQUFBLFdBQ0EsR0FBQSxHQUFBLEtBQ0EsRUFBQSxhQUFBLFFBQUEsS0FBQSxNQUFBLGFBQUEsVUFBQSxDQUNBLE9BQUEsR0FBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLGFBQUEsYUFBQSxFQUNBLEdBQUEsT0FDQSxDQUFBLEdBQUEsS0FBQSxFQUdBLE1BQUEsR0FBQSxJQUFBLElBQUEsT0FDQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEVBQ0EsSUFBQSxLQU9BLE9BTkEsR0FBQSxFQUFBLEVBQUEsUUFBQSxrQkFBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxNQUFBLEVBQUEsUUFFQSxFQUFBLFVBQUEsRUFBQSxRQUNBLEVBQUEsWUFBQSxFQUFBLFNBQ0EsRUFBQSxTQUFBLFVBQ0EsRUFBQSxJQUFBLElBQUEsT0FBQSxJQUNBLEdBQ0EsS0FBQSxXQUNBLGFBQUEsV0FBQSxFQUNBLEdBQUEsSUFDQSxFQWpCQSxHQUFBLG9CQXFCQSxJQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxLQUdBLEdBQ0EsUUFBQSxFQUFBLFVBS0EsT0FIQSxtQkFBQSxLQUNBLEVBQUEsWUFBQSxHQUVBLFFBQUEsVUFBQSxXQUFBLEtBQ0EsRUFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLDRCQUVBLFNBQUEsYUFBQSxPQUNBLEVBQUEsYUFDQSxLQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsRUFBQSxFQUFBLEtBR0EsRUFBQSxTQUFBLEVBQUEsR0FDQSxRQUFBLEVBQ0EsV0FBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEdBQ0EsRUFBQSxJQUNBLFNBQUEsR0FDQSxFQUFBLElBQ0EsR0FFQSxXQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsV0FBQSxFQUFBLEVBQUEsU0FBQSxHQUNBLEVBQUEsSUFDQSxTQUFBLEdBQ0EsRUFBQSxJQUNBLE1BTUEsU0FBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsSUFDQSxPQUFBLEdBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLElBQUEsRUFBQSxlQUFBLFFBQUEsRUFBQSxVQUFBLEdBQ0EsS0FBQSxTQUFBLEdBQ0EsR0FBQSxLQU1BLE9BTEEsR0FBQSxFQUFBLEVBQUEsUUFBQSxrQkFBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxNQUFBLEVBQUEsUUFFQSxFQUFBLEVBQUEsTUFBQSxFQUNBLEVBQUEsRUFBQSxNQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsZUFBQSxRQUFBLEVBQUEsT0FBQSxHQUFBLEdBQUEsSUFDQSxHQUNBLEtBQUEsU0FBQSxHQUNBLEVBQUEsSUFDQSxTQUFBLEdBQ0EsS0FBQSxFQUFBLEtBQ0EsRUFBQSxHQUVBLEVBQUEsUUFNQSxNQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FDQSxFQUFBLEVBQ0EsT0FBQSxHQUFBLFNBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxJQUFBLEVBQUEsT0FDQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxLQUFBLHFCQUFBLEtBQUEsT0FBQSxRQUNBLEdBQ0EsS0FBQSxTQUFBLEdBRUEsTUFEQSxHQUFBLEVBQUEsRUFBQSxRQUFBLEtBQUEsV0FBQSxLQUFBLE9BQ0EsRUFBQSxJQUFBLEVBQUEsVUFBQSxJQUNBLEdBQ0EsS0FBQSxTQUFBLEdBQ0EsR0FDQSxJQUFBLEVBQ0EsT0FBQSxLQUVBLE1BSUEsV0FBQSxXQUNBLEdBQUEsR0FBQSxJQUNBLE9BQUEsR0FBQSxTQUFBLEVBQUEsR0FDQSxXQUFBLElBQUEsRUFBQSxXQUFBLFNBQUEsR0FDQSxLQUFBLEVBQUEsTUFDQSxhQUFBLE9BQUEsRUFBQSxPQUFBLGNBQ0EsR0FBQSxJQUVBLEVBQUEsSUFFQSxNQUdBLGVBQUEsV0FDQSxHQUFBLEdBQUEsSUFDQSxPQUFBLEdBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxhQUNBLEtBQUEsV0FDQSxNQUFBLEdBQUEsTUFBQSxNQUNBLEdBQ0EsS0FBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsRUFBQSxPQUFBLFFBQUEsS0FBQSx3Q0FBQSxLQUFBLE1BQ0EsWUFBQSxNQUFBLEVBQUEsZUFBQSxTQUFBLEVBQUEsU0FBQSxHQUNBLEVBQUEsMEJBQUEsRUFBQSxPQUFBLFFBQUEsaUJBQUEsTUFDQSxHQUVBLFFBQUEsRUFBQSxhQUVBLE1BR0EsZUFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLGFBQ0EsSUFBQSxHQUFBLEVBQUEsTUFDQSxTQUFBLHFJQUNBLE1BQUEsMkJBQ0EsU0FBQSxHQUNBLE1BQUEsRUFDQSxVQUNBLEtBQUEsU0FDQSxNQUFBLFdBQ0EsT0FBQSxTQUFBLEtBQUEsS0FBQSxFQUNBLEVBQUEsV0FHQSxLQUFBLGVBQ0EsS0FBQSxrQkFDQSxNQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxNQUFBLGFBQUEsU0FBQSxRQUNBLE9BQUEsSUFBQSxFQUFBLFdBQUEsVUFDQSxFQUFBLGNBQ0EsRUFBQSxTQUFBLEdBQ0EsSUFFQSxFQUFBLFdBQUEsT0FBQSxFQUNBLEVBQUEsV0FBQSxTQUFBLEdBQ0EsRUFBQSxpQkFGQSxjQVFBLGNBQUEsYUFHQSxTQUFBLFNBQUEsR0FDQSxHQUFBLEVBQUEsUUFBQSxFQUNBLFFBRUEsSUFBQSxNQUNBLEVBQUEsR0FDQSxFQUFBLEdBQ0EsRUFBQSxDQWdCQSxPQWZBLEdBQUEsUUFBQSxTQUFBLEdBQ0EsR0FBQSxFQUFBLE1BQ0EsRUFBQSxHQUFBLEtBQUEsR0FBQSxFQUNBLE1BRUEsRUFBQSxFQUNBLElBQ0EsRUFBQSxFQUFBLEtBQ0EsRUFBQSxJQUNBLEtBQUEsRUFBQSxLQUNBLFNBRUEsRUFBQSxHQUFBLEtBQUEsR0FBQSxLQUdBLE9DeE5BLFFBQUEsT0FBQSxnQkFFQSxRQUFBLGlCQUFBLHFCQUFBLFNBQUEsRUFBQSxHQUNBLEVBQ0EsTUFBQSxTQUNBLElBQUEsSUFDQSxPQUNBLGFBQ0EsWUFBQSxVQUFBLGlCQUlBLE1BQUEsWUFDQSxJQUFBLFlBQ0EsT0FDQSxhQUNBLFlBQUEsVUFBQSxnQkFDQSxXQUFBLHlCQUlBLE1BQUEsU0FDQSxJQUFBLFNBQ0EsT0FDQSxhQUNBLFlBQUEsVUFBQSxpQkFJQSxNQUFBLFNBQ0EsSUFBQSxTQUNBLE9BQ0EsYUFDQSxZQUFBLFVBQUEsYUFDQSxXQUFBLHNCQUlBLE1BQUEsWUFDQSxJQUFBLFlBQ0EsT0FDQSxhQUNBLFlBQUEsVUFBQSxzQkFDQSxXQUFBLHlCQUlBLE1BQUEsV0FDQSxJQUFBLFdBQ0EsT0FDQSxhQUNBLFlBQUEsVUFBQSxlQUNBLFdBQUEsd0JBSUEsTUFBQSxpQkFDQSxJQUFBLHdCQUNBLFNBQ0EsU0FBQSxLQUFBLGVBQUEsWUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsSUFBQSxFQUNBLEVBQUEsRUFBQSxRQUNBLEVBQUEsbUJBQUEsY0FBQSxRQUFBLEtBQUEsTUFBQSxhQUFBLFVBQUEsQ0FDQSxLQUFBLEdBQUEsS0FBQSxHQUNBLEVBQUEsR0FBQSxNQUFBLEVBQUEsT0FDQSxFQUFBLEVBUUEsT0FMQSxHQUNBLEVBQUEsUUFBQSxHQUVBLEVBQUEsS0FBQSxZQUFBLFVBRUEsRUFBQSxXQUdBLE9BQ0EsYUFDQSxZQUFBLFVBQUEscUJBQ0EsV0FBQSw4QkFJQSxNQUFBLGdCQUNBLElBQUEsaUJBQ0EsT0FDQSxhQUNBLFlBQUEsVUFBQSw4QkFDQSxXQUFBLDZCQUlBLE1BQUEsYUFDQSxJQUFBLGNBQ0EsT0FDQSxhQUNBLFlBQUEsVUFBQSwyQkFDQSxXQUFBLDBCQUlBLE1BQUEsaUJBQ0EsSUFBQSxrQkFDQSxPQUNBLGFBQ0EsWUFBQSxVQUFBLHdCQUNBLFdBQUEsd0JBSUEsTUFBQSxXQUNBLElBQUEsV0FDQSxPQUNBLGFBQ0EsWUFBQSxVQUFBLHdCQUNBLFdBQUEsd0JBSUEsTUFBQSxVQUNBLElBQUEsVUFDQSxPQUNBLGFBQ0EsWUFBQSxVQUFBLGtCQUtBLEVBQUEsVUFBQSxjQ2hJQSxJQUFBLFdBQUEscUJBQ0EsU0FBQSxZQUFBLHVCQUFBLFNBQUEsUUFBQSxZQUFBLGVBQUEsV0FBQSxhQUFBLGlCQUFBLEtBQUEsY0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUVBLEVBQUEsVUFBQSxXQUNBLElBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxZQUFBLFdBQ0EsRUFBQSxPQUFBLElBQ0EsYUFBQSxRQUFBLEtBQUEsVUFBQSxHQUNBLEVBQUEsUUFBQSxHQUVBLEVBQUEsV0FBQSw2QkFFQSxTQUFBLEdBQ0EsRUFBQSxHQUNBLEVBQUEsV0FBQSw0QkFJQSxJQUFBLEdBQUEsV0FDQSxNQUFBLEdBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLFNBQUEsR0FFQSxRQUFBLEdBQUEsR0FDQSxNQUFBLE9BQUEsS0FBQSxHQUNBLFdBQ0EsVUFBQSxLQUFBLEdBQ0EsT0FDQSxVQUFBLEtBQUEsR0FDQSxZQUNBLFlBQUEsS0FBQSxHQUNBLFlBREEsT0FSQSxHQUFBLE1BQUEsRUFBQSxDQW9DQSxPQXhCQSxHQUFBLEdBQUEsS0FBQSxnQkFBQSxLQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxNQUFBLEtBQUEsS0FDQSxHQUFBLElBQ0EsRUFBQSxRQUFBLEdBQ0EsRUFBQSxJQUNBLEtBQUEsRUFBQSxHQUFBLEdBQUEsT0FDQSxVQUNBLElBQUEsRUFBQSxHQUFBLEdBQUEsT0FDQSxNQUFBLEVBQUEsR0FBQSxHQUFBLE9BQ0EsVUFBQSxFQUFBLEdBQUEsR0FBQSxPQUNBLE9BQUEsRUFBQSxFQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsS0FBQSxXQUdBLEtBRUEsRUFBQSxFQUFBLEdBQUEsUUFBQSxNQUNBLElBQUEsRUFBQSxHQUFBLEdBQUEsT0FDQSxNQUFBLEVBQUEsR0FBQSxHQUFBLE9BQ0EsVUFBQSxFQUFBLEdBQUEsR0FBQSxPQUNBLE9BQUEsRUFBQSxFQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsS0FBQSxhQUtBLEVBRUEsb0JBQUEsWUFDQSxFQUFBLElBQUEsc0NBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLEVBQUEsUUFDQSxHQUVBLEVBQUEsYUFDQSxLQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsSUFBQSxRQUNBLFdBRUEsTUFBQSxHQUFBLE9BQUEsZ0NBR0EsS0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLE1BQ0EsRUFBQSxFQUFBLFFBQUEsS0FBQSxnQ0FBQSxLQUFBLFVBRUEsV0FDQSxNQUFBLEdBQUEsT0FBQSxnQ0FFQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsSUFDQSxFQUFBLEVBQUEsT0FBQSxRQUFBLEtBQUEsNkRBQUEsS0FBQSxRQUFBLFVBQUEsSUFFQSxXQUNBLE1BQUEsR0FBQSxPQUFBLGdDQUVBLEtBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxJQUNBLEVBQUEsRUFBQSxRQUFBLEtBQUEsaURBQUEsS0FBQSxRQUFBLFVBQUEsSUFFQSxXQUNBLE1BQUEsR0FBQSxPQUFBLGdDQUVBLEtBQUEsU0FBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLFVBQ0EsU0FBQSxHQUNBLEVBQUEsT0FNQSxHQUFBLFNBQUEsRUFDQSxtQkFBQSxjQUFBLFVBQ0EsRUFBQSxRQUFBLEtBQUEsTUFBQSxhQUFBLFNBR0EsSUFBQSxHQUFBLFNBQUEsR0FDQSxFQUFBLE9BQ0EsTUFBQSxTQUNBLFNBQUEsSUFFQSxFQUFBLFdBQUEsOEJDbkhBLElBQUEsV0FBQSwwQkFDQSxTQUFBLFlBQUEsdUJBQUEsU0FBQSxRQUFBLFlBQUEsZUFBQSxXQUFBLGFBQUEsaUJBQUEsS0FBQSxjQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBRUEsRUFBQSxVQUFBLFdBQ0EsSUFDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLFlBQUEsV0FDQSxFQUFBLE9BQUEsSUFFQSxhQUFBLGFBQUEsS0FBQSxVQUFBLEdBQ0EsRUFBQSxpQkFBQSxHQUVBLEVBQUEsV0FBQSw2QkFFQSxTQUFBLEdBQ0EsRUFBQSxHQUNBLEVBQUEsV0FBQSw0QkFJQSxJQUFBLEdBQUEsV0FDQSxNQUFBLEdBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLFNBQUEsR0FFQSxJQUFBLEdBREEsTUFDQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsSUFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLEVBQUEsSUFBQSxLQUFBLHdCQUFBLE1BQ0EsR0FBQSxFQUFBLElBQUEsS0FBQSx1QkFBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsR0FDQSxFQUFBLE1BQ0EsS0FBQSxFQUNBLEtBQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsT0FDQSxLQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLE9BQ0EsSUFBQSxFQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxPQUNBLEtBQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsT0FDQSxLQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLE9BQ0EsS0FBQSxFQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxPQUNBLE9BQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsT0FDQSxVQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLE9BQ0EsS0FBQSxTQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLFlBS0EsTUFBQSxHQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsVUFFQSxLQUNBLEVBQUEsRUFDQSxvQkFBQSxZQUNBLEVBQUEsSUFBQSxtQ0FDQSxLQUFBLFNBQUEsR0FFQSxNQURBLEdBQUEsS0FBQSxFQUFBLE1BQ0EsRUFBQSxJQUFBLDhDQUNBLEdBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxLQUFBLEVBQUEsTUFDQSxFQUFBLEVBQUEsS0FDQSxHQUVBLEVBQUEsYUFDQSxLQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsSUFBQSxRQUNBLFdBRUEsTUFBQSxHQUFBLE9BQUEsZ0NBR0EsS0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLE1BQ0EsRUFBQSxFQUFBLFFBQUEsS0FBQSxnQ0FBQSxLQUFBLFVBRUEsV0FDQSxNQUFBLEdBQUEsT0FBQSxnQ0FFQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsSUFDQSxFQUFBLEVBQUEsT0FBQSxRQUFBLEtBQUEsNkRBQUEsS0FBQSxRQUFBLFVBQUEsSUFFQSxXQUNBLE1BQUEsR0FBQSxPQUFBLGdDQUVBLEtBQUEsU0FBQSxHQUVBLE1BREEsR0FBQSxFQUFBLE9BQ0EsRUFBQSxJQUFBLEVBQUEsR0FBQSxLQUFBLGtDQUFBLEtBQUEsUUFBQSxVQUFBLElBQ0EsV0FDQSxNQUFBLEdBQUEsT0FBQSxnQ0FFQSxLQUFBLFNBQUEsR0FFQSxNQURBLEdBQUEsS0FBQSxFQUFBLFFBQ0EsRUFBQSxJQUFBLEVBQUEsR0FBQSxLQUFBLGtDQUFBLEtBQUEsUUFBQSxVQUFBLElBQ0EsV0FDQSxNQUFBLEdBQUEsT0FBQSxnQ0FFQSxLQUFBLFNBQUEsR0FFQSxNQURBLEdBQUEsS0FBQSxFQUFBLFFBQ0EsRUFBQSxJQUFBLEVBQUEsR0FBQSxLQUFBLGtDQUFBLEtBQUEsUUFBQSxVQUFBLElBQ0EsV0FDQSxNQUFBLEdBQUEsT0FBQSxnQ0FFQSxLQUFBLFNBQUEsR0FDQSxFQUFBLEtBQUEsRUFBQSxRQUNBLEVBQUEsRUFBQSxLQUNBLFNBQUEsR0FDQSxFQUFBLE9BTUEsR0FBQSxrQkFBQSxFQUNBLG1CQUFBLGNBQUEsZUFDQSxFQUFBLGlCQUFBLEtBQUEsTUFBQSxhQUFBLGNBR0EsSUFBQSxHQUFBLFNBQUEsR0FDQSxFQUFBLE9BQ0EsTUFBQSxTQUNBLFNBQUEsSUFFQSxFQUFBLFdBQUEsOEJDbkhBLElBQUEsV0FBQSxxQkFDQSxTQUFBLFlBQUEsY0FBQSxLQUFBLFFBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBRUEsRUFBQSxTQUFBLEVBRUEsRUFBQSxVQUFBLFdBQ0EsSUFDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLFlBQUEsV0FDQSxFQUFBLFlBQUEsRUFDQSxFQUFBLFdBQUEsNkJBRUEsU0FBQSxHQUNBLEVBQUEsR0FDQSxFQUFBLFdBQUEsNkJBR0EsRUFBQSxRQUFBLFNBQUEsR0FDQSxJQUNBLE1BQUEsR0FBQSxRQUFBLEdBQUEsUUFBQSxzQkFBQSxPQUNBLE1BQUEsR0FDQSxNQUFBLElBSUEsSUFBQSxHQUFBLFdBQ0EsTUFBQSxHQUFBLFNBQUEsRUFBQSxHQUVBLEdBQUEsR0FBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLENBQ0EsS0FDQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEtBQUEscUJBQUEsT0FBQSxNQUFBLFVBQUEsSUFDQSxNQUFBLElBQ0EsR0FBQSxLQUNBLEdBQUEsR0FBQSxLQUFBLHFCQUFBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLE1BQUEsS0FBQSxLQUNBLEdBQUEsR0FDQSxFQUFBLE1BQ0EsS0FBQSxFQUFBLEdBQUEsR0FBQSxPQUNBLE1BQUEsRUFBQSxHQUFBLEdBQUEsT0FDQSxLQUFBLEVBQUEsR0FBQSxHQUFBLE9BQ0EsSUFBQSxFQUFBLEdBQUEsR0FBQSxPQUNBLE9BQUEsTUFBQSxTQUFBLEVBQUEsR0FBQSxHQUFBLFlBQUEsRUFBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEdBQUEsUUFDQSxRQUFBLE1BQUEsU0FBQSxFQUFBLEdBQUEsR0FBQSxZQUFBLEVBQUEsRUFBQSxTQUFBLEVBQUEsR0FBQSxHQUFBLE9BQUEsTUFBQSxXQUNBLE9BQUEsTUFBQSxTQUFBLEVBQUEsR0FBQSxHQUFBLFlBQUEsRUFBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEdBQUEsV0FJQSxJQUFBLElBQ0EsS0FBQSxFQUFBLFNBQUEsR0FDQSxRQUFBLEVBQ0EsV0FBQSxTQUFBLE9BQUEsdUJBR0EsT0FEQSxjQUFBLFFBQUEsS0FBQSxVQUFBLEdBQ0EsRUFHQSxvQkFBQSxZQUNBLEVBQUEsSUFBQSxzQ0FDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLEVBQUEsRUFBQSxRQUNBLEdBRUEsRUFBQSxhQUNBLEtBQUEsV0FDQSxNQUFBLEdBQUEsSUFBQSxJQUFBLFFBQ0EsV0FFQSxNQUFBLEdBQUEsT0FBQSxnQ0FHQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsTUFDQSxFQUFBLEVBQUEsUUFBQSxLQUFBLGdDQUFBLEtBQUEsVUFFQSxXQUNBLE1BQUEsR0FBQSxPQUFBLGdDQUVBLEtBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxJQUNBLEVBQUEsRUFBQSxPQUFBLFFBQUEsS0FBQSw2REFBQSxLQUFBLFFBQUEsVUFBQSxJQUVBLFdBQ0EsTUFBQSxHQUFBLE9BQUEsZ0NBRUEsS0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLElBQ0EsRUFBQSxFQUFBLFFBQUEsS0FBQSxpREFBQSxLQUFBLFFBQUEsVUFBQSxJQUVBLFdBQ0EsTUFBQSxHQUFBLE9BQUEsZ0NBRUEsS0FBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLEVBQUEsVUFDQSxXQUNBLEVBQUEsa0NBTUEsR0FBQSxhQUFBLEVBQ0EsbUJBQUEsY0FBQSxVQUNBLEVBQUEsWUFBQSxLQUFBLE1BQUEsYUFBQSxTQUdBLElBQUEsR0FBQSxTQUFBLEdBQ0EsRUFBQSxPQUNBLE1BQUEsU0FDQSxTQUFBLElBRUEsRUFBQSxXQUFBLDBCQUdBLEdBQUEsZUFBQSxXQUFBLE1DdEhBLElBQUEsV0FBQSxtQkFDQSxTQUFBLGNBQUEsV0FBQSxnQkFBQSx1QkFBQSxhQUFBLFlBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUVBLEVBQUEsVUFBQSxFQUNBLEVBQUEsU0FBQSxHQUVBLEVBQUEsU0FBQSxFQUNBLEVBQUEsV0FBQSxHQUVBLEVBQUEsaUJBQ0EsYUFBQSxJQUdBLEVBQUEsT0FBQSxXQUNBLEdBQUEsRUFBQSxTQUFBLEVBQUEsU0FLQSxDQUNBLEVBQUEsV0FBQSxhQUNBLEVBQUEsU0FBQSxFQUNBLEVBQUEsSUFBQSxJQUFBLE9BQ0EsS0FBQSxTQUFBLEdBQ0EsTUFBQSxFQUFBLE1BQUEsRUFBQSxFQUNBLElBQUEsS0FPQSxPQU5BLEdBQUEsRUFBQSxFQUFBLFFBQUEsa0JBQUEsS0FBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLEVBQUEsTUFBQSxFQUFBLFFBRUEsRUFBQSxVQUFBLEVBQUEsUUFDQSxFQUFBLFlBQUEsRUFBQSxTQUNBLEVBQUEsU0FBQSxVQUNBLEVBQUEsSUFBQSxJQUFBLE9BQUEsSUFDQSxTQUFBLEdBQ0EsRUFBQSxLQUVBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLEVBQUEsUUFBQSxLQUFBLGlDQUVBLE9BQUEsRUFBQSxNQUNBLEVBQUEsR0FDQSxFQUFBLFFBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsS0FBQSxhQUFBLFNBRUEsRUFBQSxTQUFBLEVBQ0EsRUFBQSxXQUFBLEdBTUEsYUFBQSxRQUFBLEtBQUEsV0FDQSxRQUFBLEVBQUEsUUFDQSxTQUFBLEVBQUEsV0FHQSxhQUFBLFNBQUEsRUFDQSxhQUFBLE1BQUEsRUFBQSxPQUNBLEVBQUEsT0FBQSxFQUNBLEVBQUEsVUFBQSxhQUFBLE1BQUEsY0FDQSxFQUFBLFdBQUEsR0FDQSxFQUFBLFNBQUEsRUFDQSxTQUFBLFNBQ0EsRUFBQSxlQUNBLEVBQUEsZ0JBQUEsS0FHQSxFQUVBLElBQUEsR0FBQSxTQUFBLEVBQUEsR0FFQSxFQUFBLFNBQUEsRUFDQSxFQUFBLFdBQUEsR0FDQSxFQUFBLE9BQ0EsTUFBQSxTQUNBLFNBQUEsRUFBQSxFQUFBLDJCQTVEQSxHQUFBLE9BQ0EsTUFBQSxTQUNBLFNBQUEsOENDYkEsSUFBQSxXQUFBLHFCQUNBLFNBQUEsWUFBQSx1QkFBQSxTQUFBLFlBQUEsZUFBQSxXQUFBLGFBQUEsaUJBQUEsS0FBQSxjQUFBLGdCQUFBLFFBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsVUFBQSxFQUNBLEVBQUEsVUFBQSxFQUNBLEVBQUEscUJBQUEsU0FBQSxHQUNBLEVBQUEsbUJBR0EsRUFBQSxVQUFBLG1CQUFBLGNBQUEsUUFBQSxLQUFBLE1BQUEsYUFBQSxVQUFBLENBRUEsSUFBQSxHQUFBLFdBQ0EsTUFBQSxHQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxTQUFBLEdBQ0EsR0FBQSxLQWFBLE9BWkEsR0FBQSxHQUFBLEtBQUEsNkNBQUEsS0FBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxHQUFBLEtBQUEsS0FBQSxPQUNBLEVBQUEsRUFBQSxNQUFBLHVCQUNBLEdBQUEsTUFDQSxVQUFBLEVBQ0EsS0FBQSxFQUFBLEdBQ0EsSUFBQSxFQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUEsUUFDQSxLQUFBLEVBQUEsR0FDQSxVQUFBLEVBQUEsT0FHQSxhQUFBLFFBQUEsS0FBQSxVQUFBLEdBQ0EsRUFHQSxvQkFBQSxZQUNBLEVBQUEsSUFBQSxzQ0FDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLEVBQUEsRUFBQSxRQUNBLEdBRUEsRUFBQSxhQUNBLEtBQUEsV0FDQSxNQUFBLEdBQUEsSUFBQSxJQUFBLFFBQ0EsV0FFQSxNQUFBLEdBQUEsT0FBQSxnQ0FHQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsTUFDQSxFQUFBLEVBQUEsUUFBQSxLQUFBLGdDQUFBLEtBQUEsVUFFQSxXQUNBLE1BQUEsR0FBQSxPQUFBLGdDQUVBLEtBQUEsU0FBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLE9BQUEsVUFDQSxXQUNBLEVBQUEsZ0NBTUEsR0FBQSxVQUFBLFdBQ0EsSUFDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLFVBQUEsRUFDQSxFQUFBLE9BQ0EsRUFBQSxXQUFBLDJCQUNBLFNBQUEsR0FDQSxFQUFBLElBR0EsSUFBQSxHQUFBLFNBQUEsR0FDQSxFQUFBLE9BQ0EsRUFBQSxPQUNBLE1BQUEsU0FDQSxTQUFBLElBRUEsRUFBQSxXQUFBLDRCQUlBLEVBQUEsWUFDQSxFQUFBLE1BQUEsWUFBQSw0QkFBQSxZQUFBLElBQ0EsRUFBQSxnQkNqRkEsSUFBQSxXQUFBLDJCQUNBLFNBQUEsWUFBQSx1QkFBQSxTQUFBLFlBQUEsUUFBQSx1QkFBQSxlQUFBLFdBQUEsYUFBQSxpQkFBQSxLQUFBLGNBQUEsVUFBQSxXQUFBLGdCQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxFQUFBLFVBQUEsbUJBQUEsY0FBQSxRQUFBLEtBQUEsTUFBQSxhQUFBLFVBQUEsRUFDQSxFQUFBLE9BQ0EsUUFBQSxFQUNBLFNBQUEsR0FFQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEdBQ0EsRUFBQSxTQUFBLEVBRUEsRUFBQSxxQkFDQSxFQUFBLFdBRUEsSUFBQSxHQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxHQUFBLEtBQUEsNEJBQUEsT0FDQSxFQUFBLEVBQUEsR0FBQSxLQUFBLDZCQUFBLE9BQ0EsS0FDQSxJQTJDQSxPQTFDQSxHQUFBLEdBQUEsS0FBQSw4REFBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLElBQUEsR0FDQSxFQUFBLE1BQ0EsUUFBQSxTQUFBLEVBQUEsR0FBQSxLQUFBLG1CQUFBLFFBQ0EsS0FBQSxFQUFBLEdBQUEsS0FBQSxtQkFBQSxPQUNBLE9BQUEsRUFBQSxHQUFBLEtBQUEsZ0JBQUEsT0FDQSxLQUFBLEVBQUEsR0FBQSxLQUFBLG1CQUFBLE9BQ0EsTUFBQSxFQUFBLEdBQUEsS0FBQSxvQkFBQSxLQUFBLFlBSUEsRUFBQSxHQUFBLEtBQUEsK0RBQUEsS0FBQSxTQUFBLEVBQUEsR0FDQSxJQUFBLEdBQ0EsRUFBQSxNQUNBLEtBQUEsaUJBQ0EsUUFBQSxTQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLFFBQ0EsT0FBQSxFQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxPQUNBLE1BQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsT0FDQSxLQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLE9BQ0EsU0FBQSxFQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxPQUNBLE9BQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsS0FBQSxPQUFBLFFBQUEsR0FBQSxFQUNBLFFBQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsS0FBQSxPQUFBLFFBQUEsR0FBQSxFQUNBLEtBQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsS0FBQSxlQUFBLEtBQUEsWUFJQSxFQUFBLEdBQUEsS0FBQSxzRUFBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLElBQUEsR0FDQSxFQUFBLE1BQ0EsS0FBQSx1QkFDQSxRQUFBLFNBQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsUUFDQSxPQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLE9BQ0EsTUFBQSxFQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxPQUNBLEtBQUEsRUFBQSxHQUFBLEtBQUEsTUFBQSxHQUFBLEdBQUEsT0FDQSxTQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsR0FBQSxHQUFBLE9BQ0EsT0FBQSxFQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsUUFBQSxHQUFBLEVBQ0EsUUFBQSxFQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsUUFBQSxHQUFBLEVBQ0EsS0FBQSxFQUFBLEdBQUEsS0FBQSxNQUFBLEdBQUEsR0FBQSxLQUFBLGVBQUEsS0FBQSxhQU1BLGlCQUFBLEVBQ0EsaUJBQUEsRUFDQSxVQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFDQSxPQUFBLEdBSUEsb0JBQUEsWUFDQSxFQUFBLElBQUEsNkNBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLEVBQUEsUUFDQSxHQUVBLEVBQUEsYUFDQSxLQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsSUFBQSxRQUNBLFdBRUEsTUFBQSxHQUFBLE9BQUEsZ0NBR0EsS0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLE1BQ0EsRUFBQSxFQUFBLFFBQUEsS0FBQSxnQ0FBQSxLQUFBLFVBRUEsV0FDQSxNQUFBLEdBQUEsT0FBQSxnQ0FFQSxLQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsZUFBQSxRQUFBLEVBQUEsVUFBQSxJQUNBLFdBQ0EsTUFBQSxHQUFBLE9BQUEsOEJBRUEsS0FBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLEVBQUEsVUFDQSxXQUNBLEVBQUEsbUNBTUEsb0JBQUEsR0FBQSxVQUFBLEdBQUEsT0FDQSxFQUFBLEVBQUEsVUFBQSxHQUFBLEtBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxVQUFBLEdBQUEsT0FBQSxFQUNBLGFBQUEsUUFBQSxLQUFBLFVBQUEsRUFBQSxXQUNBLEVBQUEsWUFBQSxXQUNBLEVBQUEsTUFBQSxTQUFBLEVBQ0EsRUFBQSxNQUFBLE9BQUEsRUFBQSxVQUFBLEdBQUEsU0FFQSxFQUFBLFdBQUEsMkJBQ0EsSUFFQSxFQUFBLE1BQUEsU0FBQSxFQUNBLEVBQUEsTUFBQSxPQUFBLEVBQUEsVUFBQSxHQUFBLFFBR0EsRUFBQSxVQUFBLFNBQUEsR0FDQSxFQUFBLFNBQUEsRUFDQSxXQUFBLFdBQ0EsRUFBQSxVQUNBLEtBR0EsSUFBQSxHQUFBLFNBQUEsR0FDQSxFQUFBLE9BQ0EsTUFBQSxTQUNBLFNBQUEsSUFFQSxFQUFBLFdBQUEsMEJBR0EsR0FBQSxlQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsU0FBQSxJQUFBLFdBQUEsR0FDQSxFQUFBLEdBQ0EsS0FBQSxTQUFBLEdBQ0EsT0FBQSxLQUFBLEVBQUEsV0FDQSxFQUFBLFNBQUEsSUFBQSxXQUFBLElBQ0EsV0FDQSxFQUFBLFNBQUEsSUFBQSxXQUFBLE1BSUEsRUFBQSxrQkFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLGtCQUFBLElBQUEsV0FBQSxHQUNBLEVBQUEsR0FDQSxLQUFBLFNBQUEsR0FDQSxPQUFBLEtBQUEsRUFBQSxXQUNBLEVBQUEsa0JBQUEsSUFBQSxXQUFBLElBQ0EsV0FDQSxFQUFBLGtCQUFBLElBQUEsV0FBQSxLQUtBLElBQUEsR0FBQSxTQUFBLEdBR0EsTUFBQSxHQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsYUFDQSxLQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsSUFBQSxRQUNBLFdBRUEsTUFBQSxHQUFBLE9BQUEsZ0NBR0EsS0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLE1BQ0EsRUFBQSxFQUFBLFFBQUEsS0FBQSxnQ0FBQSxLQUFBLFVBRUEsV0FDQSxNQUFBLEdBQUEsT0FBQSxnQ0FFQSxLQUFBLFdBQ0EsTUFBQSxHQUFBLFNBQUEsRUFBQSxVQUFBLEdBQUEsSUFBQSxJQUNBLFdBQ0EsTUFBQSxHQUFBLE9BQUEsOEJBRUEsS0FBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLE9BQUEsV0FDQSxTQUFBLEdBQ0EsRUFBQSxPQUtBLEdBQUEsUUFBQSxXQUVBLEVBQUEsTUFBQSxTQUFBLGtGQUVBLEVBQUEsRUFBQSxVQUFBLEdBQUEsS0FDQSxLQUFBLFNBQUEsR0FDQSxRQUFBLElBQUEsR0FDQSxFQUFBLFVBQUEsR0FBQSxPQUFBLEVBQ0EsYUFBQSxRQUFBLEtBQUEsVUFBQSxFQUFBLFdBQ0EsRUFBQSxZQUFBLFdBQ0EsRUFBQSxNQUFBLFNBQUEsRUFDQSxFQUFBLE1BQUEsT0FBQSxFQUFBLFVBQUEsR0FBQSxTQUVBLEVBQUEsT0FDQSxFQUFBLFVBQ0EsU0FBQSxHQUNBLEVBQUEsT0FDQSxFQUFBLFNDbE5BLElBQUEsV0FBQSxzQkFDQSxTQUFBLGNBQUEsV0FBQSxnQkFBQSxhQUFBLGlCQUFBLFlBQUEsS0FBQSxRQUFBLGdCQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxFQUFBLFVBQUEsRUFDQSxFQUFBLFVBQUEsRUFDQSxFQUFBLHFCQUFBLFNBQUEsR0FDQSxFQUFBLG1CQUdBLEVBQUEsU0FBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLFFBRUEsT0FBQSxRQUFBLEdBQUEsT0FBQSxFQUFBLE9BQ0EsUUFHQSxPQUFBLEdBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLE9BQ0EsV0FHQSxPQUFBLEdBQUEsRUFDQSxXQURBLFFBS0EsRUFBQSxlQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxTQUNBLEVBQUEsSUFDQSxLQUNBLEdBQUEsR0FBQSxFQUFBLE1BQUEsS0FBQSxHQUFBLE1BQUEsS0FDQSxFQUFBLFNBQUEsRUFBQSxJQUNBLEVBQUEsU0FBQSxFQUFBLEdBRUEsR0FBQSxPQUFBLEdBQUEsS0FBQSxHQUFBLE9BQUEsR0FDQSxNQUFBLEdBQ0EsRUFBQSxPQUFBLEdBR0EsTUFBQSxHQUFBLEVBQ0EsV0FEQSxRQUtBLEVBQUEsWUFBQSxFQUNBLEVBQUEsV0FFQSxJQUFBLEdBQUEsU0FBQSxHQUNBLEdBQUEsS0FpQkEsT0FoQkEsR0FBQSxHQUFBLEtBQUEsTUFBQSxLQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxNQUFBLEtBQUEsS0FDQSxJQUFBLEVBQUEsRUFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLEdBQUEsR0FBQSxPQUFBLE1BQUEsWUFDQSxHQUFBLE1BQ0EsS0FBQSxFQUFBLEdBQUEsR0FBQSxPQUNBLEtBQUEsRUFBQSxHQUFBLEdBQUEsT0FDQSxNQUFBLEVBQUEsR0FBQSxHQUFBLE9BQ0EsT0FBQSxFQUFBLEdBQ0EsS0FBQSxFQUFBLEdBQ0EsUUFBQSxFQUFBLEdBQUEsR0FBQSxPQUNBLEtBQUEsRUFBQSxHQUFBLEdBQUEsT0FDQSxTQUFBLEVBQUEsR0FBQSxHQUFBLFlBSUEsR0FHQSxFQUFBLFdBQ0EsTUFBQSxHQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsR0FBQSxLQUFBLFNBQ0EsRUFBQSxFQUFBLEVBQUEsR0FBQSxHQUFBLFFBQ0EsRUFBQSxFQUFBLEVBQUEsR0FBQSxHQUFBLFFBQ0EsRUFBQSxFQUFBLE9BQUEsR0FDQSxFQUFBLEVBQUEsU0FBQSxFQUtBLE9BSkEsR0FBQSxPQUFBLElBQ0EsYUFBQSxPQUFBLEtBQUEsVUFBQSxJQUVBLGFBQUEsV0FBQSxTQUFBLE9BQUEsd0JBRUEsT0FBQSxFQUFBLFdBQUEsYUFBQSxZQUlBLG9CQUFBLFlBQ0EsRUFBQSxJQUFBLHVDQUNBLEtBQUEsU0FBQSxHQUNBLEVBQUEsRUFBQSxFQUFBLFFBQ0EsR0FFQSxFQUFBLGFBQ0EsS0FBQSxXQUNBLE1BQUEsR0FBQSxJQUFBLElBQUEsUUFDQSxXQUVBLE1BQUEsR0FBQSxPQUFBLGdDQUdBLEtBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxNQUNBLEVBQUEsRUFBQSxRQUFBLEtBQUEsZ0NBQUEsS0FBQSxVQUVBLFdBQ0EsTUFBQSxHQUFBLE9BQUEsZ0NBRUEsS0FBQSxTQUFBLEdBQ0EsR0FBQSxNQUNBLEVBQUEsRUFBQSxNQUtBLE9BSkEsR0FBQSxFQUFBLEVBQUEsUUFBQSxrQkFBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsRUFBQSxNQUFBLEVBQUEsUUFFQSxFQUFBLGNBQUEsd0NBQ0EsRUFBQSxJQUFBLGVBQUEsb0JBQUEsT0FBQSxHQUFBLElBQ0EsV0FDQSxNQUFBLEdBQUEsT0FBQSxtQ0FFQSxLQUFBLFNBQUEsR0FDQSxFQUFBLEVBQUEsRUFBQSxVQUNBLFNBQUEsR0FDQSxFQUFBLE9BNEJBLElBdEJBLEVBQUEsVUFBQSxXQUNBLElBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxPQUNBLEVBQUEsV0FBQSwwQkFDQSxFQUFBLGdCQUNBLEVBQUEsWUFBQSxFQUNBLEVBQUEsU0FBQSxFQUFBLFFBQ0EsU0FBQSxHQUNBLEVBQUEsSUFHQSxJQUFBLEdBQUEsU0FBQSxHQUNBLEVBQUEsT0FDQSxFQUFBLE9BQ0EsTUFBQSxTQUNBLFNBQUEsSUFFQSxFQUFBLFdBQUEsNEJBSUEsYUFBQSxPQUNBLElBQ0EsS0FBQSxNQUFBLGFBQUEsUUFBQSxPQUFBLElBQ0EsRUFBQSxZQUFBLEVBQ0EsRUFBQSxTQUFBLEtBQUEsTUFBQSxhQUFBLFNBRUEsTUFBQSxRQUlBLEdBQUEsTUFBQSxXQUNBLEVBQUEsTUFBQSxZQUFBLDRCQUFBLFlBQUEsSUFDQSxFQUFBLGlCQy9KQSxJQUFBLFdBQUEsc0JBQUEsU0FBQSxZQUFBLHVCQUNBIiwiZmlsZSI6Ind3dy9qcy9jb21waWxlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQklOVVNNQVlBIE1PRFVMRVxuICogQGF1dGhvciBQZWRveCA8bmF1ZmFsQG1hcnRhYmFrYW5nLnVzPlxuICovXG5cblxuLy8gYW5ndWxhci5tb2R1bGUgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyIG1vZHVsZXNcbi8vICdzdGFydGVyJyBpcyB0aGUgbmFtZSBvZiB0aGlzIGFuZ3VsYXIgbW9kdWxlIGV4YW1wbGUgKGFsc28gc2V0IGluIGEgPGJvZHk+IGF0dHJpYnV0ZSBpbiBpbmRleC5odG1sKVxuLy8gdGhlIDJuZCBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb2YgJ3JlcXVpcmVzJ1xuXG52YXIgdmlld19wYXRoID0gJ3ZpZXdzLycsXG4gIHBjb2xvciA9ICcjMUM1MzZGJyxcbiAgX2JpbWF5X3VybCA9ICdodHRwOi8vYmludXNtYXlhLmJpbnVzLmFjLmlkJyxcbiAgX2JpbWF5X2FwaV91cmwgPSAnaHR0cDovL2FwcHMuYmludXNtYXlhLmJpbnVzLmFjLmlkJztcblxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdCaW51c01heWEnLCBbJ2lvbmljJywgJ2xpc3RSb3V0ZScsICdCaW51c01heWFGYWN0b3J5J10pXG5cbi5ydW4oZnVuY3Rpb24oJGlvbmljUGxhdGZvcm0sICRyb290U2NvcGUsICRpb25pY0hpc3RvcnksICRpb25pY05hdkJhckRlbGVnYXRlLCBCaW51c01heWEsICR0aW1lb3V0KSB7XG5cbiAgJHJvb3RTY29wZS5sb2dpbiA9ICh0eXBlb2YgbG9jYWxTdG9yYWdlLmlzbG9naW4gPT0gXCJ1bmRlZmluZWRcIiA/IGZhbHNlIDogbG9jYWxTdG9yYWdlLmlzbG9naW4pO1xuICAkcm9vdFNjb3BlLmxlZnRNZW51ID0gZmFsc2U7XG4gICRyb290U2NvcGUucHJvZmlsZVBpY3R1cmUgPSBmYWxzZTtcbiAgJHJvb3RTY29wZS5sb2dpbk5hbWUgPSB0eXBlb2YgbG9jYWxTdG9yYWdlLmZuYW1lID09IFwidW5kZWZpbmVkXCIgPyBudWxsIDogbG9jYWxTdG9yYWdlLmZuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGRlbGV0ZSBsb2NhbFN0b3JhZ2UuY29va2llO1xuICBkZWxldGUgbG9jYWxTdG9yYWdlLnRlbXBsb2dpbjtcblxuICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAkcm9vdFNjb3BlLm9uTG9hZFN0eWxlID0ge1xuICAgICAgb3BhY2l0eTogMVxuICAgIH07XG4gICAgLy8gSGlkZSB0aGUgYWNjZXNzb3J5IGJhciBieSBkZWZhdWx0IChyZW1vdmUgdGhpcyB0byBzaG93IHRoZSBhY2Nlc3NvcnkgYmFyIGFib3ZlIHRoZSBrZXlib2FyZFxuICAgIC8vIGZvciBmb3JtIGlucHV0cylcbiAgICAvKmlmICh3aW5kb3cuY29yZG92YSAmJiB3aW5kb3cuY29yZG92YS5wbHVnaW5zLktleWJvYXJkKSB7XG4gICAgICBjb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQuaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyKHRydWUpO1xuICAgIH0qL1xuICAgIGlmICh3aW5kb3cuU3RhdHVzQmFyKSB7XG4gICAgICBTdGF0dXNCYXIuc3R5bGVEZWZhdWx0KCk7XG4gICAgfVxuICAgIGlmKGxvY2FsU3RvcmFnZS5pc2xvZ2luKSB7XG4gICAgICBnZXRQcm9maWxlSW1hZ2UoKTsgIFxuICAgIH1cbiAgfSk7XG5cbiAgJHJvb3RTY29wZS5nZXRMYXN0VXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgJHJvb3RTY29wZS5sYXN0VXBkYXRlID0gdHlwZW9mIGxvY2FsU3RvcmFnZS5sYXN0VXBkYXRlID09PSBcInVuZGVmaW5lZFwiID8gXCJXaGF0ZXZlclwiIDogbG9jYWxTdG9yYWdlLmxhc3RVcGRhdGU7XG4gIH07XG4gICRyb290U2NvcGUuZ2V0TGFzdFVwZGF0ZSgpO1xuICAkcm9vdFNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyMvJztcbiAgICAkaW9uaWNIaXN0b3J5LmNsZWFySGlzdG9yeSgpO1xuICAgICRpb25pY05hdkJhckRlbGVnYXRlLnNob3dCYWNrQnV0dG9uKGZhbHNlKTtcbiAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgfTtcblxuICB2YXIgZ2V0UHJvZmlsZUltYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgLyoqIHBlZm9ybSBhdmF0YXIgKiovXG4gICAgaWYobG9jYWxTdG9yYWdlLnByb2ZpbGVQaWN0dXJlKSB7XG4gICAgICAkcm9vdFNjb3BlLnByb2ZpbGVQaWN0dXJlID0gbG9jYWxTdG9yYWdlLnByb2ZpbGVQaWN0dXJlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGh0dHBjbGllbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEJpbnVzTWF5YS5wcm9maWxlUGljdHVyZSgpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnByb2ZpbGVQaWN0dXJlID0gZG9uZTtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS5wcm9maWxlUGljdHVyZSA9IGRvbmU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXG5cbiAgaWYgKCRyb290U2NvcGUubG9naW4pIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcvc2NoZWR1bGUnO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJy8nO1xuICB9XG59KVxuXG4uY29uZmlnKGZ1bmN0aW9uKCRpb25pY0NvbmZpZ1Byb3ZpZGVyKSB7XG4gICRpb25pY0NvbmZpZ1Byb3ZpZGVyLnZpZXdzLmZvcndhcmRDYWNoZShmYWxzZSk7XG4gICRpb25pY0NvbmZpZ1Byb3ZpZGVyLnZpZXdzLm1heENhY2hlKDApO1xufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnQmludXNNYXlhRmFjdG9yeScsIFtdKVxuXG4uZmFjdG9yeSgnQmludXNNYXlhJywgZnVuY3Rpb24oJHEsICRpb25pY1BvcHVwKSB7XG4gIHJldHVybiB7XG5cbiAgICBfYmltYXlfdXJsOiAnaHR0cDovL2JpbnVzbWF5YS5iaW51cy5hYy5pZCcsXG4gICAgX2JpbWF5X2FwaV91cmw6ICdodHRwOi8vYXBwcy5iaW51c21heWEuYmludXMuYWMuaWQnLFxuXG4gICAgaGVhZGVyczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3QgPSB0aGlzO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgQ29va2llOiBsb2NhbFN0b3JhZ2UuY29va2llID8gbG9jYWxTdG9yYWdlLmNvb2tpZSA6IG51bGwsXG4gICAgICAgIE9yaWdpbjogX3QuX2JpbWF5X3VybCxcbiAgICAgICAgUmVmZXJlcjogX3QuX2JpbWF5X3VybFxuICAgICAgfTtcbiAgICB9LFxuICAgIGNoZWNrTG9naW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90ID0gdGhpcztcbiAgICAgIHZhciBsb2dpbiA9IGxvY2FsU3RvcmFnZS5sb2dpbklkID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UubG9naW5JZCkgOiBmYWxzZTtcbiAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS50ZW1wbG9naW4gPT09IHRydWUpIHtcbiAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYobG9naW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmVqZWN0KFwicGxlYXNlIGxvZ2luXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBfdC5hcGkoJy8nLCAnZ2V0JylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgaWYgKGQuY29kZSAhPT0gMjAwKSByZWplY3QoZCk7XG4gICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgICAgICAgICQoJChkLnJlc3VsdCkuc2VyaWFsaXplQXJyYXkoKSkuZWFjaChmdW5jdGlvbihpLCBkKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtkLm5hbWVdID0gZC52YWx1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGRhdGEudHh0VXNlcklkID0gbG9naW4uYmludXNpZDtcbiAgICAgICAgICAgICAgZGF0YS50eHRQYXNzd29yZCA9IGxvZ2luLnBhc3N3b3JkO1xuICAgICAgICAgICAgICBkYXRhLmJ0bkxvZ2luID0gXCJMb2cgSW4gXCI7XG4gICAgICAgICAgICAgIHJldHVybiBfdC5hcGkoJy8nLCAncG9zdCcsIGRhdGEpO1xuICAgICAgICAgICAgfSwgcmVqZWN0KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UudGVtcGxvZ2luID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYXBpOiBmdW5jdGlvbihlbmRwb2ludCwgbWV0aG9kLCBwYXJhbXMsIG5vRW5kcG9pbnQsIG5vUmVkaXJlY3QpIHtcbiAgICAgIHZhciBfdCA9IHRoaXM7XG4gICAgICAvKmpzaGludCAtVzAzMCAqL1xuICAgICAgdHlwZW9mIG5vRW5kcG9pbnQgIT09IFwidW5kZWZpbmVkXCIgPyBmYWxzZSA6IHRydWU7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgaGVhZGVyczogX3QuaGVhZGVycygpLFxuICAgICAgfTtcbiAgICAgIGlmKHR5cGVvZiBub1JlZGlyZWN0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIG9wdGlvbnMubm9SZWRpcmVjdCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZihuYXZpZ2F0b3IuY29ubmVjdGlvbi50eXBlID09IFwibm9uZVwiKSB7XG4gICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICByZWplY3QoXCJObyBpbnRlcm5ldCBjb25uZWN0aW9uXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYWxTdG9yYWdlLmNvb2tpZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBfdC5fZ2V0Q29va2llKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfdC5hcGkoZW5kcG9pbnQsIG1ldGhvZCwgcGFyYW1zKTtcbiAgICAgICAgICB9KTsgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJnZXRcIikge1xuICAgICAgICAgICAgaHR0cGNsaWVudC5nZXQoKG5vRW5kcG9pbnQgPyBlbmRwb2ludCA6IF90Ll9iaW1heV91cmwgKyBlbmRwb2ludCksIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShkKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh0dHBjbGllbnQucG9zdCgobm9FbmRwb2ludCA/IGVuZHBvaW50IDogX3QuX2JpbWF5X3VybCArIGVuZHBvaW50KSwgcGFyYW1zLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoZCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGRvd25sb2FkOiBmdW5jdGlvbih1cmwsIGZvcm1OYW1lKSB7XG4gICAgICB2YXIgX3QgPSB0aGlzO1xuICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICByZXR1cm4gX3QuYXBpKF90Ll9iaW1heV9hcGlfdXJsICsnL0xNUy8nKyB1cmwsICdnZXQnLCB7fSwgdHJ1ZSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgICAgJCgkKGQucmVzdWx0KS5zZXJpYWxpemVBcnJheSgpKS5lYWNoKGZ1bmN0aW9uKGksIGUpIHtcbiAgICAgICAgICAgIGRhdGFbZS5uYW1lXSA9IGUudmFsdWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGF0YVtmb3JtTmFtZSsnLngnXSA9IDE7XG4gICAgICAgICAgZGF0YVtmb3JtTmFtZSsnLnknXSA9IDE7XG4gICAgICAgICAgcmV0dXJuIF90LmFwaShfdC5fYmltYXlfYXBpX3VybCArJy9MTVMvJysgdXJsLCAncG9zdCcsIGRhdGEsIHRydWUsIHRydWUpO1xuICAgICAgICB9LCByZWplY3QpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZWplY3QoZCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICBpZihkLmNvZGUgPT0gMzAyKSB7XG4gICAgICAgICAgICByZXNvbHZlKGQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBmcmFtZTogZnVuY3Rpb24odXJsKSB7XG4gICAgICB2YXIgX3QgPSB0aGlzLFxuICAgICAgICBfdXJsID0gJyc7XG4gICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHJldHVybiBfdC5hcGkodXJsLCAnZ2V0JylcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gX3QuYXBpKCQoZC5yZXN1bHQpLmZpbmQoXCIjY3RsMDBfY3AxX2lmckFwcFwiKS5hdHRyKFwic3JjXCIpLCAnZ2V0Jyk7XG4gICAgICAgICAgfSwgcmVqZWN0KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIF91cmwgPSAkKGQucmVzdWx0KS5maW5kKFwiI2lmckFwcFwiKS5hdHRyKFwic3JjXCIpO1xuICAgICAgICAgICAgcmV0dXJuIF90LmFwaShfdXJsLCAnZ2V0Jywge30sIHRydWUpO1xuICAgICAgICAgIH0sIHJlamVjdClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgdXJsOiBfdXJsLFxuICAgICAgICAgICAgICByZXN1bHQ6IGRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgX2dldENvb2tpZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3QgPSB0aGlzO1xuICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBodHRwY2xpZW50LmdldChfdC5fYmltYXlfdXJsLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgaWYgKGRhdGEuY29kZSA9PSAyMDApIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jb29raWUgPSBkYXRhLmhlYWRlclsnU2V0LUNvb2tpZSddO1xuICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHJvZmlsZVBpY3R1cmU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90ID0gdGhpcztcbiAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgX3QuY2hlY2tMb2dpbigpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdC5mcmFtZSgnLycpO1xuICAgICAgICB9LCByZWplY3QpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHsgXG4gICAgICAgICAgdmFyIHVybCA9ICQoZC5yZXN1bHQucmVzdWx0KS5maW5kKFwiI2N0bDAwX2NwUmlnaHRfdWNQaG90b19pbWdQcm9maWxlUGljXCIpLmF0dHIoXCJzcmNcIik7XG4gICAgICAgICAgaHR0cGNsaWVudC5pbWFnZShfdC5fYmltYXlfYXBpX3VybCArIFwiL2hvbWUvXCIgKyB1cmwsIGZ1bmN0aW9uKGQpIHsgXG4gICAgICAgICAgICByZXNvbHZlKCdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCcgKyBkLnJlc3VsdC5yZXBsYWNlKC8oXFxyXFxufFxcbnxcXHIpL2dtLFwiXCIpKTtcbiAgICAgICAgICB9LCByZWplY3QsIFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IF90LmhlYWRlcnMoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwcm9tcHRQYXNzd29yZDogZnVuY3Rpb24obG9jYXRpb24sIHNjb3BlKSB7XG4gICAgICBzY29wZS5wcm9tcHRQYXNzID0ge307XG4gICAgICB2YXIgbXlQb3B1cCA9ICRpb25pY1BvcHVwLnNob3coe1xuICAgICAgICB0ZW1wbGF0ZTogJzxwIG5nLXNob3c9XCJwcm9tcHRQYXNzLmVycm9yXCI+SW5jb3JyZWN0IFBhc3N3b3JkPC9wPjxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBjbGFzcz1cInByb21wdFBhc3MtZm9ybVwiIG5nLW1vZGVsPVwicHJvbXB0UGFzcy5wYXNzd29yZFwiPicsXG4gICAgICAgIHRpdGxlOiAnRW50ZXIgQmludXNtYXlhIFBhc3N3b3JkJyxcbiAgICAgICAgc3ViVGl0bGU6ICcnLFxuICAgICAgICBzY29wZTogc2NvcGUsXG4gICAgICAgIGJ1dHRvbnM6IFt7XG4gICAgICAgICAgdGV4dDogJ0NhbmNlbCcsXG4gICAgICAgICAgb25UYXA6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyMvJyArIGxvY2F0aW9uO1xuICAgICAgICAgICAgbXlQb3B1cC5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIHRleHQ6ICc8Yj5FbnRlcjwvYj4nLFxuICAgICAgICAgIHR5cGU6ICdidXR0b24tcG9zaXRpdmUnLFxuICAgICAgICAgIG9uVGFwOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgbXlwYXNzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UubG9naW5JZCkucGFzc3dvcmQ7XG4gICAgICAgICAgICBpZiAobXlwYXNzID09IHNjb3BlLnByb21wdFBhc3MucGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgc2NvcGUucHJvbXB0UGFzcyA9IHt9O1xuICAgICAgICAgICAgICBzY29wZS5pc0FsbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzY29wZS5wcm9tcHRQYXNzLmVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgc2NvcGUucHJvbXB0UGFzcy5wYXNzd29yZCA9IFwiXCI7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1dXG4gICAgICB9KTtcbiAgICB9LFxuICAgIF9yZXF1ZXN0RXJyb3I6IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgIH0sXG4gICAgZ3JvdXBpbmc6IGZ1bmN0aW9uKF9kYXRhKSB7XG4gICAgICBpZiAoX2RhdGEubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIG0gPSBbXSxcbiAgICAgICAgcCA9ICcnLFxuICAgICAgICBjID0gLTEsXG4gICAgICAgIGNoID0gMDtcbiAgICAgIF9kYXRhLmZvckVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICBpZiAocCA9PSBkLmRhdGUpIHtcbiAgICAgICAgICBtW2NdLmRhdGFbY2hdID0gZDtcbiAgICAgICAgICBjaCsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoID0gMTtcbiAgICAgICAgICBjKys7XG4gICAgICAgICAgcCA9IGQuZGF0ZTtcbiAgICAgICAgICBtW2NdID0ge1xuICAgICAgICAgICAgZGF0ZTogZC5kYXRlLFxuICAgICAgICAgICAgZGF0YTogW11cbiAgICAgICAgICB9O1xuICAgICAgICAgIG1bY10uZGF0YVswXSA9IGQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG07XG4gICAgfVxuICB9O1xufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2xpc3RSb3V0ZScsIFtdKVxuXG4uY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAkc3RhdGVQcm92aWRlclxuICAgIC5zdGF0ZSgnaW5kZXgnLCB7XG4gICAgICB1cmw6ICcvJyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtYWluLXZpZXcnOiB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZpZXdfcGF0aCArICdsb2dpbi5odG1sJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ3NjaGVkdWxlJywge1xuICAgICAgdXJsOiAnL3NjaGVkdWxlJyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtYWluLXZpZXcnOiB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZpZXdfcGF0aCArICdzY2hlZHVsZS5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnU2NoZWR1bGVDb250cm9sbGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ2Fib3V0Jywge1xuICAgICAgdXJsOiAnL2Fib3V0JyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtYWluLXZpZXcnOiB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZpZXdfcGF0aCArICdhYm91dC5odG1sJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ2ZvcnVtJywge1xuICAgICAgdXJsOiAnL2ZvcnVtJyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtYWluLXZpZXcnOiB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZpZXdfcGF0aCArICdmb3J1bS5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnRm9ydW1Db250cm9sbGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ3NlcnZpY2VzJywge1xuICAgICAgdXJsOiAnL3NlcnZpY2VzJyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtYWluLXZpZXcnOiB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZpZXdfcGF0aCArICdzZXJ2aWNlcy9pbmRleC5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnU2VydmljZXNDb250cm9sbGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ215Y2xhc3MnLCB7XG4gICAgICB1cmw6ICcvbXljbGFzcycsXG4gICAgICB2aWV3czoge1xuICAgICAgICAnbWFpbi12aWV3Jzoge1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiB2aWV3X3BhdGggKyAnbXljbGFzcy5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnTXlDbGFzc0NvbnRyb2xsZXInXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIC5zdGF0ZSgnbXljbGFzc0RldGFpbCcsIHtcbiAgICAgIHVybDogJy9teWNsYXNzLWRldGFpbC86Y29kZScsXG4gICAgICByZXNvbHZlOiB7XG4gICAgICAgIGRhdGFzZXQ6IGZ1bmN0aW9uKCRxLCAkc3RhdGVQYXJhbXMsICRsb2NhdGlvbikge1xuICAgICAgICAgIHZhciBfZ290ID0gZmFsc2U7XG4gICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICB2YXIgY2xhc3NEYXRhID0gKHR5cGVvZiBsb2NhbFN0b3JhZ2UubXlDbGFzcyAhPT0gXCJ1bmRlZmluZWRcIiA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLm15Q2xhc3MpIDogZmFsc2UpO1xuICAgICAgICAgIGZvciAodmFyIGQgaW4gY2xhc3NEYXRhKSB7XG4gICAgICAgICAgICBpZiAoY2xhc3NEYXRhW2RdLmNvZGUgPT0gJHN0YXRlUGFyYW1zLmNvZGUpIHtcbiAgICAgICAgICAgICAgX2dvdCA9IGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChfZ290KSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKF9nb3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL215Y2xhc3MnKS5yZXBsYWNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdmlld3M6IHtcbiAgICAgICAgJ21haW4tdmlldyc6IHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogdmlld19wYXRoICsgJ215Y2xhc3NJbnNpZGUuaHRtbCcsXG4gICAgICAgICAgY29udHJvbGxlcjogJ015Q2xhc3NEZXRhaWxDb250cm9sbGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ2V4YW1TY2hlZHVsZScsIHtcbiAgICAgIHVybDogJy9leGFtLXNjaGVkdWxlJyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtYWluLXZpZXcnOiB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZpZXdfcGF0aCArICdzZXJ2aWNlcy9leGFtLXNjaGVkdWxlLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdFeGFtU2NoZWR1bGVDb250cm9sbGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ2V4YW1TY29yZScsIHtcbiAgICAgIHVybDogJy9leGFtLXNjb3JlJyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtYWluLXZpZXcnOiB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6IHZpZXdfcGF0aCArICdzZXJ2aWNlcy9leGFtLXNjb3JlLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdFeGFtU2NvcmVDb250cm9sbGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ2ZpbmFuY2VTdGF0dXMnLCB7XG4gICAgICB1cmw6ICcvZmluYW5jZS1zdGF0dXMnLFxuICAgICAgdmlld3M6IHtcbiAgICAgICAgJ21haW4tdmlldyc6IHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogdmlld19wYXRoICsgJ3NlcnZpY2VzL2JpbGxpbmcuaHRtbCcsXG4gICAgICAgICAgY29udHJvbGxlcjogJ0ZpbmFuY2VDb250cm9sbGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ2Fic2VuY2UnLCB7XG4gICAgICB1cmw6ICcvYWJzZW5jZScsXG4gICAgICB2aWV3czoge1xuICAgICAgICAnbWFpbi12aWV3Jzoge1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiB2aWV3X3BhdGggKyAnc2VydmljZXMvYWJzZW5jZS5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnQWJzZW5jZUNvbnRyb2xsZXInXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIC5zdGF0ZSgnY29taW5nJywge1xuICAgICAgdXJsOiAnL2NvbWluZycsXG4gICAgICB2aWV3czoge1xuICAgICAgICAnbWFpbi12aWV3Jzoge1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiB2aWV3X3BhdGggKyAnY29taW5nLmh0bWwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL2NvbWluZ1wiKTtcbn1dKTtcbiIsImFwcC5jb250cm9sbGVyKCdBYnNlbmNlQ29udHJvbGxlcicsXG4gIGZ1bmN0aW9uKCRzY29wZSwgQmludXNNYXlhLCAkaW9uaWNOYXZCYXJEZWxlZ2F0ZSwgJHN0YXRlLCAkaHR0cCwgJGxvY2F0aW9uLFxuICAgICRzdGF0ZVBhcmFtcywgJHRpbWVvdXQsICRyb290U2NvcGUsICRpb25pY1BsYXRmb3JtLCAkcSwgJGlvbmljUG9wdXApIHtcblxuICAgICRzY29wZS5kb1JlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlZnJlc2hBYnNlbmNlKClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICAgICRzY29wZS4kYXBwbHlBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChkb25lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmFic2VuY2UgPSBKU09OLnN0cmluZ2lmeShkb25lKTtcbiAgICAgICAgICAgICAgJHNjb3BlLmFic2VuY2UgPSBkb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgZXJySGFuZGxlKGVycik7XG4gICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciByZWZyZXNoQWJzZW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmV0dXJuUmVzcG9uc2UgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgdmFyIF9kYXRhID0gW10sIGNvdW50ID0gMDtcbiAgICAgICAgICBmdW5jdGlvbiBnZXRTdGF0dXMoc3RyKSB7XG5cdFx0XHRcdFx0XHRpZigvYmFpay8udGVzdChzdHIpKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAnYmFsYW5jZWQnO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKC93YXJuaW5nLy50ZXN0KHN0cikpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICdjYWxtJztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZigvbWF4aW11bS8udGVzdChzdHIpKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAnZW5lcmdpemVkJztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZigvb3ZlcmxpbWl0Ly50ZXN0KHN0cikpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICdhc3NlcnRpdmUnO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cbiAgICAgICAgICAkKGRhdGEpLmZpbmQoJyNycHRUYWJsZSB0cicpLmVhY2goZnVuY3Rpb24oaSwgYSkge1xuICAgICAgICAgICAgdmFyIGh0ID0gJCh0aGlzKS5maW5kKCd0ZCcpO1xuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgIGlmIChodC5sZW5ndGggPj0gOCkge1xuICAgICAgICAgICAgICAgIF9kYXRhW2NvdW50XSA9IHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IGh0LmVxKDApLmh0bWwoKSxcbiAgICAgICAgICAgICAgICAgIGFic2VuY2U6IFt7XG4gICAgICAgICAgICAgICAgICAgIG1heDogaHQuZXEoMykuaHRtbCgpLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbDogaHQuZXEoNCkuaHRtbCgpLFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGh0LmVxKDIpLnRleHQoKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBnZXRTdGF0dXMoaHQuZXEoNSkuZmluZChcImltZ1wiKS5hdHRyKFwic3JjXCIpKVxuICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX2RhdGFbY291bnQgLSAxXS5hYnNlbmNlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgbWF4OiBodC5lcSgyKS5odG1sKCksXG4gICAgICAgICAgICAgICAgICB0b3RhbDogaHQuZXEoMykuaHRtbCgpLFxuICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiBodC5lcSgxKS50ZXh0KCksXG4gICAgICAgICAgICAgICAgICBzdGF0dXM6IGdldFN0YXR1cyhodC5lcSg0KS5maW5kKFwiaW1nXCIpLmF0dHIoXCJzcmNcIikpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gX2RhdGE7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgaHR0cGNsaWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICRodHRwLmdldCgnaHR0cDovL2xvY2FsaG9zdDoyNTA1L2Fic2VuY2UuaHRtbCcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuUmVzcG9uc2UoZC5kYXRhKSk7XG4gICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICBcdEJpbnVzTWF5YS5jaGVja0xvZ2luKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gQmludXNNYXlhLmFwaSgnLycsICdnZXQnKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyBGYWlsIHRvIHJlLWxvZ2luXG4gICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCByZS1hdXRoIHlvdXIgYWNjb3VudFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgLy8gTG9hZCBUaGVzZSBQYWdlXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIEJpbnVzTWF5YS5mcmFtZShcbiAgICAgICAgICAgICAgJChkLnJlc3VsdCkuZmluZChcIi5pdGVtQ29udGVudCB1bCBsaTplcSgzKSA+IGFcIikuYXR0cihcImhyZWZcIilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgYWNjZXNzIHRvIG1haW4gZnJhbWVcIik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gQmludXNNYXlhLmFwaShcbiAgICAgICAgICAgICAgJChkLnJlc3VsdC5yZXN1bHQpLmZpbmQoXCIjY3RsMDBfY3BDb250ZW50X3JwdE1haW5NZW51U3R1ZGVudF9jdGwwMV9saW5rTWVudVN0dWRlbnRcIikuYXR0cihcImhyZWZcIiksICdnZXQnLCB7fSwgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCBhY2Nlc3MgdG8gbWFpbiBmcmFtZVwiKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBCaW51c01heWEuYXBpKFxuICAgICAgICAgICAgICAkKGQucmVzdWx0KS5maW5kKFwiI2N0bDAwX2NwQ29udGVudF9ycHRTdWJNZW51X2N0bDAyX2xpbmtTdWJNZW51XCIpLmF0dHIoXCJocmVmXCIpLCAnZ2V0Jywge30sIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgYWNjZXNzIHRvIG1haW4gZnJhbWVcIik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJldHVyblJlc3BvbnNlKGMucmVzdWx0KSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmFic2VuY2UgPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZS5hYnNlbmNlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAkc2NvcGUuYWJzZW5jZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmFic2VuY2UpO1xuICAgIH1cblxuICAgIHZhciBlcnJIYW5kbGUgPSBmdW5jdGlvbihtc2cpIHtcbiAgICAgICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgdGl0bGU6ICdPb3BzICEnLFxuICAgICAgICB0ZW1wbGF0ZTogbXNnXG4gICAgICB9KTtcbiAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdzY3JvbGwucmVmcmVzaENvbXBsZXRlJyk7XG4gICAgfTtcblxuICB9KTsiLCJhcHAuY29udHJvbGxlcignRXhhbVNjaGVkdWxlQ29udHJvbGxlcicsXG4gIGZ1bmN0aW9uKCRzY29wZSwgQmludXNNYXlhLCAkaW9uaWNOYXZCYXJEZWxlZ2F0ZSwgJHN0YXRlLCAkaHR0cCwgJGxvY2F0aW9uLCBcbiAgXHQkc3RhdGVQYXJhbXMsICR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkaW9uaWNQbGF0Zm9ybSwgJHEsICRpb25pY1BvcHVwKSB7XG5cbiAgICAkc2NvcGUuZG9SZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWZyZXNoU2NoZWR1bGUoKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkb25lKSB7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseUFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIFx0aWYoZG9uZS5sZW5ndGggPiAwKVxuICAgICAgICAgIFx0e1xuXHQgICAgICAgICAgXHRsb2NhbFN0b3JhZ2UuZXhhbVNjaGVkdWxlID0gSlNPTi5zdHJpbmdpZnkoZG9uZSk7XG5cdCAgICAgICAgICAgICRzY29wZS5leGFtU2NoZWR1bGVMaXN0ID0gZG9uZTtcbiAgICAgICAgICBcdH1cbiAgICAgICAgICBcdCRzY29wZS4kYnJvYWRjYXN0KCdzY3JvbGwucmVmcmVzaENvbXBsZXRlJyk7XHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgZXJySGFuZGxlKGVycik7XG4gICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciByZWZyZXNoU2NoZWR1bGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIFx0dmFyIHJldHVyblJlc3BvbnNlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgXHRcdHZhciBfZGF0YSA9IFtdO1xuICAgICAgXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgXHRcdFx0dmFyIHRlcm0gPSAkKGRhdGFbaV0pLmZpbmQoXCJ0YWJsZTplcSgyKSB0ciB0ZCBsaVwiKS50ZXh0KCk7XG5cdCAgICAgIFx0XHQkKGRhdGFbaV0pLmZpbmQoXCIudGFibGV3aXRoYm9yZGVyIHRyXCIpLmVhY2goZnVuY3Rpb24oaSwgZCkge1xuXHQgICAgICBcdFx0XHRpZihpID4gMCkge1xuXHRcdCAgICAgIFx0XHRcdF9kYXRhLnB1c2goe1xuXHRcdCAgICAgIFx0XHRcdFx0dGVybTogXHRcdCAgdGVybSxcblx0XHQgICAgICBcdFx0XHRcdGNvZGU6IFx0XHRcdCQoZCkuZmluZChcInRkXCIpLmVxKDApLnRleHQoKSxcblx0XHQgICAgICBcdFx0XHRcdG5hbWU6IFx0XHRcdCQoZCkuZmluZChcInRkXCIpLmVxKDEpLnRleHQoKSxcblx0XHQgICAgICBcdFx0XHRcdHNrczogXHRcdFx0XHQkKGQpLmZpbmQoXCJ0ZFwiKS5lcSgyKS50ZXh0KCksXG5cdFx0ICAgICAgXHRcdFx0XHRkYXRlOiBcdFx0XHQkKGQpLmZpbmQoXCJ0ZFwiKS5lcSgzKS50ZXh0KCksXG5cdFx0ICAgICAgXHRcdFx0XHRob3VyOiBcdFx0XHQkKGQpLmZpbmQoXCJ0ZFwiKS5lcSg0KS50ZXh0KCksXG5cdFx0ICAgICAgXHRcdFx0XHRyb29tOiBcdFx0XHQkKGQpLmZpbmQoXCJ0ZFwiKS5lcSg1KS50ZXh0KCksXG5cdFx0ICAgICAgXHRcdFx0XHRjYW1wdXM6IFx0XHQkKGQpLmZpbmQoXCJ0ZFwiKS5lcSg2KS50ZXh0KCksXG5cdFx0ICAgICAgXHRcdFx0XHRjbGFzc05hbWU6IFx0JChkKS5maW5kKFwidGRcIikuZXEoNykudGV4dCgpLFxuXHRcdCAgICAgIFx0XHRcdFx0c2VhdDogXHRcdFx0cGFyc2VJbnQoJChkKS5maW5kKFwidGRcIikuZXEoOCkudGV4dCgpKVxuXHRcdCAgICAgIFx0XHRcdH0pO1xuXHQgICAgICBcdFx0XHR9XG5cdCAgICAgIFx0XHR9KTtcbiAgICAgIFx0XHR9XG4gICAgICBcdFx0cmV0dXJuIEJpbnVzTWF5YS5ncm91cGluZyhfLnNvcnRCeShfZGF0YSwgJ2RhdGUnKSk7XG4gICAgICBcdH07XG4gICAgICBcdHZhciBkYXRhU2NoZWR1bGUgPSBbXSxcbiAgICAgIFx0XHRcdHNjaGVkdWxlX3VybCA9IFwiXCI7XG4gICAgICBcdGlmICh0eXBlb2YgaHR0cGNsaWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICRodHRwLmdldCgnaHR0cDovL2xvY2FsaG9zdDoyNTA1L2V4YW0uaHRtbCcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBcdGRhdGFTY2hlZHVsZS5wdXNoKGQuZGF0YSk7XG4gICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MjUwNS9leGFtLXByYWN0aWN1bS5odG1sJyk7XG4gICAgICAgICAgICB9LCByZWplY3QpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBcdGRhdGFTY2hlZHVsZS5wdXNoKGUuZGF0YSk7XG4gICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuUmVzcG9uc2UoZGF0YVNjaGVkdWxlKSk7XG4gICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICBcdEJpbnVzTWF5YS5jaGVja0xvZ2luKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gQmludXNNYXlhLmFwaSgnLycsICdnZXQnKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyBGYWlsIHRvIHJlLWxvZ2luXG4gICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCByZS1hdXRoIHlvdXIgYWNjb3VudFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXHQvLyBMb2FkIFRoZXNlIFBhZ2VcbiAgICAgICAgICBcdC50aGVuKGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIEJpbnVzTWF5YS5mcmFtZShcblx0ICAgICAgICAgICAgICAkKGQucmVzdWx0KS5maW5kKFwiLml0ZW1Db250ZW50IHVsIGxpOmVxKDMpID4gYVwiKS5hdHRyKFwiaHJlZlwiKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCBhY2Nlc3MgdG8gbWFpbiBmcmFtZVwiKTtcblx0ICAgICAgICAgIH0pXG5cdCAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBCaW51c01heWEuYXBpKFxuICAgICAgICAgICAgICAgICQoZC5yZXN1bHQucmVzdWx0KS5maW5kKFwiI2N0bDAwX2NwQ29udGVudF9ycHRNYWluTWVudVN0dWRlbnRfY3RsMDJfbGlua01lbnVTdHVkZW50XCIpLmF0dHIoXCJocmVmXCIpLCAnZ2V0Jywge30sIHRydWVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgYWNjZXNzIHRvIG1haW4gZnJhbWVcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgXHRzY2hlZHVsZV91cmwgPSBkLnJlc3VsdDtcbiAgICAgICAgICAgIFx0cmV0dXJuIEJpbnVzTWF5YS5hcGkoJChzY2hlZHVsZV91cmwpLmZpbmQoXCIuaXRlbUNvbnRlbnRTZXJ2aWNlIGxpOmVxKDApIGFcIikuYXR0cihcImhyZWZcIiksICdnZXQnLCB7fSwgdHJ1ZSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChcImNhbid0IGFjY2VzcyB0byBtYWluIGZyYW1lXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIFx0ZGF0YVNjaGVkdWxlLnB1c2goZC5yZXN1bHQpO1xuICAgICAgICAgICAgXHRyZXR1cm4gQmludXNNYXlhLmFwaSgkKHNjaGVkdWxlX3VybCkuZmluZChcIi5pdGVtQ29udGVudFNlcnZpY2UgbGk6ZXEoMSkgYVwiKS5hdHRyKFwiaHJlZlwiKSwgJ2dldCcsIHt9LCB0cnVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgYWNjZXNzIHRvIG1haW4gZnJhbWVcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgXHRkYXRhU2NoZWR1bGUucHVzaChkLnJlc3VsdCk7XG4gICAgICAgICAgICBcdHJldHVybiBCaW51c01heWEuYXBpKCQoc2NoZWR1bGVfdXJsKS5maW5kKFwiLml0ZW1Db250ZW50U2VydmljZSBsaTplcSgyKSBhXCIpLmF0dHIoXCJocmVmXCIpLCAnZ2V0Jywge30sIHRydWUpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCBhY2Nlc3MgdG8gbWFpbiBmcmFtZVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBcdGRhdGFTY2hlZHVsZS5wdXNoKGQucmVzdWx0KTtcbiAgICAgICAgICAgIFx0cmVzb2x2ZShyZXR1cm5SZXNwb25zZShkYXRhU2NoZWR1bGUpKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZXhhbVNjaGVkdWxlTGlzdCA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2YgbG9jYWxTdG9yYWdlLmV4YW1TY2hlZHVsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgJHNjb3BlLmV4YW1TY2hlZHVsZUxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5leGFtU2NoZWR1bGUpO1xuICAgIH1cblxuICAgIHZhciBlcnJIYW5kbGUgPSBmdW5jdGlvbihtc2cpIHtcbiAgICAgICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgdGl0bGU6ICdPb3BzICEnLFxuICAgICAgICB0ZW1wbGF0ZTogbXNnXG4gICAgICB9KTtcbiAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdzY3JvbGwucmVmcmVzaENvbXBsZXRlJyk7XG4gICAgfTtcblxuICB9KTsiLCIvKipcbiAqIEZpbmFuY2UgQ29udHJvbGxlclxuICogQGF1dGhvciBOYXVmYWwgPG5hdWZhbEBtYXJ0YWJha2FuZy51cz5cbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ0ZpbmFuY2VDb250cm9sbGVyJyxcbiAgZnVuY3Rpb24oJHNjb3BlLCBCaW51c01heWEsICRpb25pY1BvcHVwLCAkcSwgJGh0dHApIHtcblxuICAgICRzY29wZS5pc0FsbG93ID0gZmFsc2U7XG5cbiAgICAkc2NvcGUuZG9SZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWZyZXNoRmluYW5jZSgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5QXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuZmluYW5jZUxpc3QgPSBkb25lO1xuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgZXJySGFuZGxlKGVycik7XG4gICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUudG9Nb25leSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuLnRvRml4ZWQoMikucmVwbGFjZSgvKFxcZCkoPz0oXFxkezN9KStcXC4pL2csICckMSwnKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZWZyZXNoRmluYW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIHZhciByZXR1cm5SZXNwb25zZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICB2YXIgYmlsbGluZyA9IDA7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJpbGxpbmcgPSBwYXJzZUludCgkKGRhdGEpLmZpbmQoXCJ0YWJsZTplcSgwKSB0ciB0ZFwiKS5odG1sKCkubWF0Y2goL1swLTldKy8pWzBdKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgIHZhciBoYXNpbCA9IFtdO1xuICAgICAgICAgICQoZGF0YSkuZmluZCgndGFibGUjcnB0VGFibGUgdHInKS5lYWNoKGZ1bmN0aW9uKGksIGEpIHtcbiAgICAgICAgICAgIHZhciBodCA9ICQodGhpcykuZmluZCgndGQnKTtcbiAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICBoYXNpbC5wdXNoKHtcbiAgICAgICAgICAgICAgICBkYXRlOiBodC5lcSgxKS5odG1sKCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IGh0LmVxKDIpLmh0bWwoKSxcbiAgICAgICAgICAgICAgICB0ZXJtOiBodC5lcSgzKS5odG1sKCksXG4gICAgICAgICAgICAgICAgZHVlOiBodC5lcSg0KS5odG1sKCksXG4gICAgICAgICAgICAgICAgY2hhcmdlOiBpc05hTihwYXJzZUludChodC5lcSg1KS5odG1sKCkpKSA9PT0gdHJ1ZSA/IDAgOiBwYXJzZUludChodC5lcSg1KS5odG1sKCkpLFxuICAgICAgICAgICAgICAgIHBheW1lbnQ6IGlzTmFOKHBhcnNlSW50KGh0LmVxKDYpLmh0bWwoKSkpID09PSB0cnVlID8gMCA6IHBhcnNlSW50KGh0LmVxKDYpLmh0bWwoKS5tYXRjaCgvWzAtOV0rLykpLFxuICAgICAgICAgICAgICAgIHJlZnVuZDogaXNOYU4ocGFyc2VJbnQoaHQuZXEoNykuaHRtbCgpKSkgPT09IHRydWUgPyAwIDogcGFyc2VJbnQoaHQuZXEoNykuaHRtbCgpKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgZmluYWxfZGF0YSA9IHtcbiAgICAgICAgICAgIGRhdGE6IEJpbnVzTWF5YS5ncm91cGluZyhoYXNpbCksXG4gICAgICAgICAgICBiaWxsaW5nOiBiaWxsaW5nLFxuICAgICAgICAgICAgbGFzdFVwZGF0ZTogbW9tZW50KCkuZm9ybWF0KCdEIE1NTU0gWVlZWSBoOm1tOnNzJylcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5maW5hbmNlID0gSlNPTi5zdHJpbmdpZnkoZmluYWxfZGF0YSk7XG4gICAgICAgICAgcmV0dXJuIGZpbmFsX2RhdGE7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBodHRwY2xpZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgJGh0dHAuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjI1MDUvZmluYW5jZS5odG1sJylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5SZXNwb25zZShkLmRhdGEpKTtcbiAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQmludXNNYXlhLmNoZWNrTG9naW4oKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBCaW51c01heWEuYXBpKCcvJywgJ2dldCcpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIC8vIEZhaWwgdG8gcmUtbG9naW5cbiAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChcImNhbid0IHJlLWF1dGggeW91ciBhY2NvdW50XCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAvLyBMb2FkIFRoZXNlIFBhZ2VcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gQmludXNNYXlhLmZyYW1lKFxuICAgICAgICAgICAgICAkKGQucmVzdWx0KS5maW5kKFwiLml0ZW1Db250ZW50IHVsIGxpOmVxKDMpID4gYVwiKS5hdHRyKFwiaHJlZlwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCBhY2Nlc3MgdG8gbWFpbiBmcmFtZVwiKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICByZXR1cm4gQmludXNNYXlhLmFwaShcbiAgICAgICAgICAgICAgICAkKGQucmVzdWx0LnJlc3VsdCkuZmluZChcIiNjdGwwMF9jcENvbnRlbnRfcnB0TWFpbk1lbnVTdHVkZW50X2N0bDA2X2xpbmtNZW51U3R1ZGVudFwiKS5hdHRyKFwiaHJlZlwiKSwgJ2dldCcsIHt9LCB0cnVlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChcImNhbid0IGFjY2VzcyB0byBtYWluIGZyYW1lXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEJpbnVzTWF5YS5hcGkoXG4gICAgICAgICAgICAgICAgJChkLnJlc3VsdCkuZmluZChcIiNjdGwwMF9jcENvbnRlbnRfcnB0U3ViTWVudV9jdGwwM19saW5rU3ViTWVudVwiKS5hdHRyKFwiaHJlZlwiKSwgJ2dldCcsIHt9LCB0cnVlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChcImNhbid0IGFjY2VzcyB0byBtYWluIGZyYW1lXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5SZXNwb25zZShjLnJlc3VsdCkpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcImNhbid0IGFjY2VzcyB0byBtYWluIGZyYW1lXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZmluYW5jZUxpc3QgPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZS5maW5hbmNlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAkc2NvcGUuZmluYW5jZUxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5maW5hbmNlKTtcbiAgICB9XG5cbiAgICB2YXIgZXJySGFuZGxlID0gZnVuY3Rpb24obXNnKSB7XG4gICAgICAkaW9uaWNQb3B1cC5hbGVydCh7XG4gICAgICAgIHRpdGxlOiAnT29wcyAhJyxcbiAgICAgICAgdGVtcGxhdGU6IG1zZ1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc2Nyb2xsLnJlZnJlc2hDb21wbGV0ZScpO1xuICAgIH07XG5cbiAgICBCaW51c01heWEucHJvbXB0UGFzc3dvcmQoJ3NlcnZpY2VzJywgJHNjb3BlKTtcbiAgfVxuKTsiLCJhcHAuY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJyxcbmZ1bmN0aW9uKCRzY29wZSwgJGlvbmljUG9wdXAsICR0aW1lb3V0LCAkaW9uaWNIaXN0b3J5LCAkaW9uaWNOYXZCYXJEZWxlZ2F0ZSwgJHJvb3RTY29wZSwgQmludXNNYXlhKSB7XG5cbiAgICAkcm9vdFNjb3BlLm5vSGVhZGVyID0gdHJ1ZTtcbiAgICAkaW9uaWNOYXZCYXJEZWxlZ2F0ZS5zaG93QmFyKGZhbHNlKTtcblxuICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgJHNjb3BlLmxvZ2luQ2xhc3MgPSAnJztcblxuICAgICRpb25pY0hpc3RvcnkubmV4dFZpZXdPcHRpb25zKHtcbiAgICAgIGRpc2FibGVCYWNrOiB0cnVlXG4gICAgfSk7XG5cbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISgkc2NvcGUuYmludXNpZCAmJiAkc2NvcGUucGFzc3dvcmQpKSB7XG4gICAgICAgICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICB0aXRsZTogJ09vcHMgIScsXG4gICAgICAgICAgdGVtcGxhdGU6ICdQbGVhc2UgSW5wdXQgQmludXNpYW4gSUQgYW5kIFBhc3N3b3JkJ1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzY29wZS5sb2dpbkNsYXNzID0gJ29uLWxvYWRpbmcnO1xuICAgICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XG4gICAgICAgIEJpbnVzTWF5YS5hcGkoJy8nLCAnZ2V0JylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGlmKGQuY29kZSAhPT0gMjAwKSBoYW5kbGVFcnJvcihkKTtcbiAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICAgICQoJChkLnJlc3VsdCkuc2VyaWFsaXplQXJyYXkoKSkuZWFjaChmdW5jdGlvbihpLCBkKSB7XG4gICAgICAgICAgICBkYXRhW2QubmFtZV0gPSBkLnZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRhdGEudHh0VXNlcklkID0gJHNjb3BlLmJpbnVzaWQ7XG4gICAgICAgICAgZGF0YS50eHRQYXNzd29yZCA9ICRzY29wZS5wYXNzd29yZDtcbiAgICAgICAgICBkYXRhLmJ0bkxvZ2luID0gXCJMb2cgSW4gXCI7XG4gICAgICAgICAgcmV0dXJuIEJpbnVzTWF5YS5hcGkoJy8nLCAncG9zdCcsIGRhdGEpO1xuICAgICAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9ICQoZC5yZXN1bHQpLmZpbmQoXCIjY29udGVudCAjdG9wYmFyIC5yaWdodCBzdHJvbmdcIik7XG4gICAgICAgICAgLy8gV2hlbiBTdWNjZXNzXG4gICAgICAgICAgaWYoZC5jb2RlICE9PSAyMDApXG4gICAgICAgICAgICBoYW5kbGVFcnJvcihkKTtcbiAgICAgICAgICBpZihuYW1lLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihkLCAkKGQucmVzdWx0KS5maW5kKFwiI2xibEVycm9yXCIpLnRleHQoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAkc2NvcGUubG9naW5DbGFzcyA9ICcnO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEkgVGhpbmsgdGhhdCBub3QgYmVzdCBtZXRob2RcbiAgICAgICAgICAgICAqIEB0b2RvIG1ha2UgaXQgaGFzaFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UubG9naW5JZCA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgYmludXNpZDogJHNjb3BlLmJpbnVzaWQsXG4gICAgICAgICAgICAgIHBhc3N3b3JkOiAkc2NvcGUucGFzc3dvcmRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuaXNsb2dpbiA9IHRydWU7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuZm5hbWUgPSBuYW1lLnRleHQoKTtcbiAgICAgICAgICAgICRyb290U2NvcGUubG9naW4gPSB0cnVlO1xuICAgICAgICAgICAgJHJvb3RTY29wZS5sb2dpbk5hbWUgPSBsb2NhbFN0b3JhZ2UuZm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICRzY29wZS5sb2dpbkNsYXNzID0gJyc7XG4gICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAkaW9uaWNIaXN0b3J5LmNsZWFySGlzdG9yeSgpO1xuICAgICAgICAgICAgJGlvbmljTmF2QmFyRGVsZWdhdGUuc2hvd0JhY2tCdXR0b24oZmFsc2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9LCBoYW5kbGVFcnJvcik7XG5cbiAgICAgICAgdmFyIGhhbmRsZUVycm9yID0gZnVuY3Rpb24oZGF0YSwgdGV4dCkge1xuICAgICAgICAgIHR5cGVvZiB0ZXh0ICE9PSBcInVuZGVmaW5lZFwiID8gdGV4dCA6IG51bGw7XG4gICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAkc2NvcGUubG9naW5DbGFzcyA9ICcnO1xuICAgICAgICAgICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICAgIHRpdGxlOiAnT29wcyAhJyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZXh0ID8gdGV4dCA6ICdTb21ldGhpbmcgd3JvbmcgISdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4pO1xuIiwiLyoqXG4gKiBNeSBDbGFzcyBDb250cm9sbGVyXG4gKiBAYXV0aG9yIE5hdWZhbCA8bmF1ZmFsQG1hcnRhYmFrYW5nLnVzPlxuICovXG5hcHAuY29udHJvbGxlcignTXlDbGFzc0NvbnRyb2xsZXInLFxuICBmdW5jdGlvbigkc2NvcGUsIEJpbnVzTWF5YSwgJGlvbmljTmF2QmFyRGVsZWdhdGUsICRzdGF0ZSwgJGxvY2F0aW9uLCAkc3RhdGVQYXJhbXMsICR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkaW9uaWNQbGF0Zm9ybSwgJHEsICRpb25pY1BvcHVwLCAkaW9uaWNMb2FkaW5nLCAkaHR0cCkge1xuICAgICRyb290U2NvcGUubm9IZWFkZXIgPSBmYWxzZTtcbiAgICAkcm9vdFNjb3BlLmxlZnRNZW51ID0gdHJ1ZTtcbiAgICAkaW9uaWNQbGF0Zm9ybS5vbkhhcmR3YXJlQmFja0J1dHRvbihmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuY2xhc3NEYXRhID0gKHR5cGVvZiBsb2NhbFN0b3JhZ2UubXlDbGFzcyAhPT0gXCJ1bmRlZmluZWRcIiA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLm15Q2xhc3MpIDogZmFsc2UpO1xuXG4gICAgdmFyIHJlZnJlc2hNeUNsYXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXR1cm5SZXNwb25zZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICB2YXIgX3JlRGF0YSA9IFtdO1xuICAgICAgICAgICQoZGF0YSkuZmluZChcIiNjdGwwMF9Db250ZW50UGxhY2VIb2xkZXIxX3BubFRlb3JpIHVsIGxpXCIpLmVhY2goZnVuY3Rpb24oaSwgZCkge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSAkKGQpLmZpbmQoXCJhXCIpLmh0bWwoKSxcbiAgICAgICAgICAgICAgcmVnID0gbmFtZS5tYXRjaCgvXiguKiktKC4qKSBcXCgoLiopXFwpL2kpO1xuICAgICAgICAgICAgX3JlRGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgaW5kZXhJdGVtOiBpLFxuICAgICAgICAgICAgICBuYW1lOiByZWdbMl0sXG4gICAgICAgICAgICAgIHVybDogJChkKS5maW5kKFwiYVwiKS5hdHRyKCdocmVmJyksXG4gICAgICAgICAgICAgIGNvZGU6IHJlZ1sxXSxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiByZWdbM11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5teUNsYXNzID0gSlNPTi5zdHJpbmdpZnkoX3JlRGF0YSk7XG4gICAgICAgICAgcmV0dXJuIF9yZURhdGE7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYodHlwZW9mIGh0dHBjbGllbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAkaHR0cC5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MjUwNS9teWNsYXNzLmh0bWwnKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmV0dXJuUmVzcG9uc2UoZC5kYXRhKSk7XG4gICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBCaW51c01heWEuY2hlY2tMb2dpbigpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEJpbnVzTWF5YS5hcGkoJy8nLCAnZ2V0Jyk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gRmFpbCB0byByZS1sb2dpblxuICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgcmUtYXV0aCB5b3VyIGFjY291bnRcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy8gTG9hZCBUaGVzZSBQYWdlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBCaW51c01heWEuZnJhbWUoXG4gICAgICAgICAgICAgICAgJChkLnJlc3VsdCkuZmluZChcIi5pdGVtQ29udGVudCB1bCBsaTplcSgwKSA+IGFcIikuYXR0cihcImhyZWZcIilcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgYWNjZXNzIHRvIG1haW4gZnJhbWVcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblJlc3BvbnNlKGMucmVzdWx0LnJlc3VsdCkpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcImNhbid0IGFjY2VzcyB0byBteSBjbGFzc1wiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmRvUmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVmcmVzaE15Q2xhc3MoKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkb25lKSB7XG4gICAgICAgICAgJHNjb3BlLmNsYXNzRGF0YSA9IGRvbmU7XG4gICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGVyckhhbmRsZShlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHZhciBlcnJIYW5kbGUgPSBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICB0aXRsZTogJ09vcHMgIScsXG4gICAgICAgICAgdGVtcGxhdGU6IG1zZ1xuICAgICAgICB9KTtcbiAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIGlmKCEkc2NvcGUuY2xhc3NEYXRhKSB7XG4gICAgICAkaW9uaWNMb2FkaW5nLnNob3coe3RlbXBsYXRlVXJsOiAndmlld3MvbW9kdWxlL2xvYWRpbmcuaHRtbCcsbm9CYWNrZHJvcDogdHJ1ZX0pO1xuICAgICAgJHNjb3BlLmRvUmVmcmVzaCgpO1xuICAgIH1cblxuICB9KTsiLCIvKipcbiAqIE15IENsYXNzIEluc2lkZVxuICogQGF1dGhvciBOYXVmYWwgPG5hdWZhbEBtYXJ0YWJha2FuZy51cz5cbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ015Q2xhc3NEZXRhaWxDb250cm9sbGVyJyxcbiAgZnVuY3Rpb24oJHNjb3BlLCBCaW51c01heWEsICRpb25pY05hdkJhckRlbGVnYXRlLCAkc3RhdGUsICRsb2NhdGlvbiwgJGh0dHAsICRpb25pY1Njcm9sbERlbGVnYXRlLFxuICAgICRzdGF0ZVBhcmFtcywgJHRpbWVvdXQsICRyb290U2NvcGUsICRpb25pY1BsYXRmb3JtLCAkcSwgJGlvbmljUG9wdXAsIGRhdGFzZXQsICR0aW1lb3V0LCAkaW9uaWNMb2FkaW5nKSB7XG5cbiAgICAkc2NvcGUuY2xhc3NEYXRhID0gKHR5cGVvZiBsb2NhbFN0b3JhZ2UubXlDbGFzcyAhPT0gXCJ1bmRlZmluZWRcIiA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLm15Q2xhc3MpIDogZmFsc2UpO1xuICAgICRzY29wZS5zdGF0ZSA9IHtcbiAgICAgIGlzRGF0YTogZmFsc2UsXG4gICAgICBsb2FkaW5nOiB0cnVlXG4gICAgfTtcbiAgICAkc2NvcGUuZGF0YSA9ICRzY29wZS5jbGFzc0RhdGFbZGF0YXNldF07XG4gICAgJHNjb3BlLnNob3dwYWdlID0gMDtcblxuICAgICRzY29wZS5saW5rc1NldEFzc2lnbWVudCA9IFtdO1xuICAgICRzY29wZS5saW5rc1NldCA9IFtdO1xuXG4gICAgdmFyIGdldENsYXNzRGV0YWlsID0gZnVuY3Rpb24odXJsKSB7XG4gICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXR1cm5SZXNwb25zZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICB2YXIgZGVzY19tYWluID0gJChkYXRhKS5maW5kKFwiI2Rlc2NfY291cnNlX2Rlc2MgPiBzcGFuXCIpLmh0bWwoKSxcbiAgICAgICAgICAgICAgZGVzY19ncmFkID0gJChkYXRhKS5maW5kKFwiI2Rlc2NfZ3JhZF9jb21wZXRlID4gc3BhblwiKS5odG1sKCksXG4gICAgICAgICAgICAgIGNvdXJzZSA9IFtdLCBcbiAgICAgICAgICAgICAgYXNzaWdtZW50ID0gW107XG4gICAgICAgICAgJChkYXRhKS5maW5kKFwiI2N0bDAwX0NvbnRlbnRQbGFjZUhvbGRlcjFfcG5sQ29udGVudFRoZW9yeSB0YWJsZSB0Ym9keSB0clwiKS5lYWNoKGZ1bmN0aW9uKGksIGQpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgICAgIGNvdXJzZS5wdXNoKHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uOiBwYXJzZUludCgkKGQpLmZpbmQoXCJ0ZDplcSgwKSA+IHNwYW5cIikuaHRtbCgpKSxcbiAgICAgICAgICAgICAgICBtb2RlOiAkKGQpLmZpbmQoXCJ0ZDplcSgxKSA+IHNwYW5cIikuaHRtbCgpLFxuICAgICAgICAgICAgICAgIHRvcGljczogJChkKS5maW5kKFwidGQ6ZXEoMikgPiBhXCIpLmh0bWwoKSxcbiAgICAgICAgICAgICAgICBkYXRlOiAkKGQpLmZpbmQoXCJ0ZDplcSgzKSA+IHNwYW5cIikuaHRtbCgpLFxuICAgICAgICAgICAgICAgIGxpbmtzOiAkKGQpLmZpbmQoXCJ0ZDplcSg0KSA+IGlucHV0XCIpLmF0dHIoJ25hbWUnKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkKGRhdGEpLmZpbmQoXCIjY3RsMDBfQ29udGVudFBsYWNlSG9sZGVyMV9wbmxNYWluQXNzaWdubWVudCB0YWJsZSB0Ym9keSB0clwiKS5lYWNoKGZ1bmN0aW9uKGksIGQpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgICAgIGFzc2lnbWVudC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0ZXJtOiAnTWFpbiBBc3NpZ21lbnQnLFxuICAgICAgICAgICAgICAgIHNlc3Npb246IHBhcnNlSW50KCQoZCkuZmluZChcInRkXCIpLmVxKDApLnRleHQoKSksXG4gICAgICAgICAgICAgICAgdG9waWNzOiAkKGQpLmZpbmQoXCJ0ZFwiKS5lcSgxKS50ZXh0KCksXG4gICAgICAgICAgICAgICAgdGl0bGU6ICQoZCkuZmluZChcInRkXCIpLmVxKDIpLnRleHQoKSxcbiAgICAgICAgICAgICAgICBkZXNjOiAkKGQpLmZpbmQoXCJ0ZFwiKS5lcSgzKS50ZXh0KCksXG4gICAgICAgICAgICAgICAgZGVhZGxpbmU6ICQoZCkuZmluZChcInRkXCIpLmVxKDQpLnRleHQoKSxcbiAgICAgICAgICAgICAgICB1cGxvYWQ6ICQoZCkuZmluZChcInRkXCIpLmVxKDUpLmZpbmQoXCJpbWdcIikubGVuZ3RoID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6ICQoZCkuZmluZChcInRkXCIpLmVxKDYpLmZpbmQoXCJpbWdcIikubGVuZ3RoID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxpbms6ICQoZCkuZmluZChcInRkXCIpLmVxKDcpLmZpbmQoXCJpbnB1dDplcSgwKVwiKS5hdHRyKCduYW1lJylcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJChkYXRhKS5maW5kKFwiI2N0bDAwX0NvbnRlbnRQbGFjZUhvbGRlcjFfcG5sQWRkaXRpb25hbEFzc2lnbm1lbnQyIHRhYmxlIHRib2R5IHRyXCIpLmVhY2goZnVuY3Rpb24oaSwgZCkge1xuICAgICAgICAgICAgaWYgKGkgIT09IDApIHtcbiAgICAgICAgICAgICAgYXNzaWdtZW50LnB1c2goe1xuICAgICAgICAgICAgICAgIHRlcm06ICdBZGRpdGlvbmFsIEFzc2lnbWVudCcsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjogcGFyc2VJbnQoJChkKS5maW5kKFwidGRcIikuZXEoMCkudGV4dCgpKSxcbiAgICAgICAgICAgICAgICB0b3BpY3M6ICQoZCkuZmluZChcInRkXCIpLmVxKDEpLnRleHQoKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogJChkKS5maW5kKFwidGRcIikuZXEoMikudGV4dCgpLFxuICAgICAgICAgICAgICAgIGRlc2M6ICQoZCkuZmluZChcInRkXCIpLmVxKDMpLnRleHQoKSxcbiAgICAgICAgICAgICAgICBkZWFkbGluZTogJChkKS5maW5kKFwidGRcIikuZXEoNCkudGV4dCgpLFxuICAgICAgICAgICAgICAgIHVwbG9hZDogJChkKS5maW5kKFwidGRcIikuZXEoNSkuZmluZChcImltZ1wiKS5sZW5ndGggPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogJChkKS5maW5kKFwidGRcIikuZXEoNikuZmluZChcImltZ1wiKS5sZW5ndGggPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbGluazogJChkKS5maW5kKFwidGRcIikuZXEoNykuZmluZChcImlucHV0OmVxKDApXCIpLmF0dHIoJ25hbWUnKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYWluX2Rlc2NyaXB0aW9uOiBkZXNjX21haW4sXG4gICAgICAgICAgICBncmFkX2Rlc2NyaXB0aW9uOiBkZXNjX2dyYWQsXG4gICAgICAgICAgICBhc3NpZ21lbnQ6IGFzc2lnbWVudC5sZW5ndGggPiAwID8gYXNzaWdtZW50IDogZmFsc2UsXG4gICAgICAgICAgICBjb3Vyc2U6IGNvdXJzZVxuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBodHRwY2xpZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgJGh0dHAuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjI1MDUvbXljbGFzcy1pbnNpZGUuaHRtbCcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuUmVzcG9uc2UoZC5kYXRhKSk7XG4gICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEJpbnVzTWF5YS5jaGVja0xvZ2luKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gQmludXNNYXlhLmFwaSgnLycsICdnZXQnKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyBGYWlsIHRvIHJlLWxvZ2luXG4gICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCByZS1hdXRoIHlvdXIgYWNjb3VudFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvLyBMb2FkIFRoZXNlIFBhZ2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEJpbnVzTWF5YS5mcmFtZShcbiAgICAgICAgICAgICAgICAkKGQucmVzdWx0KS5maW5kKFwiLml0ZW1Db250ZW50IHVsIGxpOmVxKDApID4gYVwiKS5hdHRyKFwiaHJlZlwiKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCBhY2Nlc3MgdG8gbWFpbiBmcmFtZVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBCaW51c01heWEuYXBpKF9iaW1heV9hcGlfdXJsICsgJy9MTVMvJyArIHVybCwgJ2dldCcsIHt9LCB0cnVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgYWNjZXNzIHRvIG15IGNsYXNzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5SZXNwb25zZShkLnJlc3VsdCkpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcImNhbid0IGFjY2VzcyB0byBjb3Vyc2UgcGFnZVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiAkc2NvcGUuY2xhc3NEYXRhW2RhdGFzZXRdLmRldGFpbCA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBnZXRDbGFzc0RldGFpbCgkc2NvcGUuY2xhc3NEYXRhW2RhdGFzZXRdLnVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICRzY29wZS5jbGFzc0RhdGFbZGF0YXNldF0uZGV0YWlsID0gZGF0YTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UubXlDbGFzcyA9IEpTT04uc3RyaW5naWZ5KCRzY29wZS5jbGFzc0RhdGEpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHlBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5zdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAkc2NvcGUuc3RhdGUuaXNEYXRhID0gJHNjb3BlLmNsYXNzRGF0YVtkYXRhc2V0XS5kZXRhaWw7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgfSwgZXJySGFuZGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLnN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICRzY29wZS5zdGF0ZS5pc0RhdGEgPSAkc2NvcGUuY2xhc3NEYXRhW2RhdGFzZXRdLmRldGFpbDtcbiAgICB9XG5cbiAgICAkc2NvcGUuc3dpdGNoVGFiID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICRzY29wZS5zaG93cGFnZSA9IHN0YXRlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgJGlvbmljU2Nyb2xsRGVsZWdhdGUucmVzaXplKCk7XG4gICAgICB9LCAxMDApO1xuICAgIH07XG5cbiAgICB2YXIgZXJySGFuZGxlID0gZnVuY3Rpb24obXNnKSB7XG4gICAgICAkaW9uaWNQb3B1cC5hbGVydCh7XG4gICAgICAgIHRpdGxlOiAnT29wcyAhJyxcbiAgICAgICAgdGVtcGxhdGU6IG1zZ1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc2Nyb2xsLnJlZnJlc2hDb21wbGV0ZScpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZG93bmxvYWRDb3Vyc2UgPSBmdW5jdGlvbihpbmRleCwgbGlua3MpIHtcbiAgICAgICRzY29wZS5saW5rc1NldFtpbmRleF0gPSB7aXNMb2FkaW5nOiB0cnVlfTtcbiAgICAgIGRvd25sb2FkTWF0ZXJpYWwobGlua3MpXG4gICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKGQsICdfc3lzdGVtJyk7XG4gICAgICAgICRzY29wZS5saW5rc1NldFtpbmRleF0gPSB7aXNMb2FkaW5nOiBmYWxzZX07ICBcbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUubGlua3NTZXRbaW5kZXhdID0ge2lzTG9hZGluZzogZmFsc2V9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5kb3dubG9hZEFzc2lnbWVudCA9IGZ1bmN0aW9uKGluZGV4LCBsaW5rcykge1xuICAgICAgJHNjb3BlLmxpbmtzU2V0QXNzaWdtZW50W2luZGV4XSA9IHtpc0xvYWRpbmc6IHRydWV9O1xuICAgICAgZG93bmxvYWRNYXRlcmlhbChsaW5rcylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgd2luZG93Lm9wZW4oZCwgJ19zeXN0ZW0nKTtcbiAgICAgICAgJHNjb3BlLmxpbmtzU2V0QXNzaWdtZW50W2luZGV4XSA9IHtpc0xvYWRpbmc6IGZhbHNlfTtcbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUubGlua3NTZXRBc3NpZ21lbnRbaW5kZXhdID0ge2lzTG9hZGluZzogZmFsc2V9O1xuICAgICAgfSk7XG4gICAgfTtcblxuXG4gICAgdmFyIGRvd25sb2FkTWF0ZXJpYWwgPSBmdW5jdGlvbihsaW5rcylcbiAgICB7XG4gICAgICAvL2NvbnNvbGUubG9nKCRzY29wZS5jbGFzc0RhdGFbZGF0YXNldF0udXJsLCBsaW5rcyk7XG4gICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIEJpbnVzTWF5YS5jaGVja0xvZ2luKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBCaW51c01heWEuYXBpKCcvJywgJ2dldCcpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gRmFpbCB0byByZS1sb2dpblxuICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChcImNhbid0IHJlLWF1dGggeW91ciBhY2NvdW50XCIpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLy8gTG9hZCBUaGVzZSBQYWdlXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIEJpbnVzTWF5YS5mcmFtZShcbiAgICAgICAgICAgICAgJChkLnJlc3VsdCkuZmluZChcIi5pdGVtQ29udGVudCB1bCBsaTplcSgwKSA+IGFcIikuYXR0cihcImhyZWZcIilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgYWNjZXNzIHRvIG1haW4gZnJhbWVcIik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICByZXR1cm4gQmludXNNYXlhLmRvd25sb2FkKCRzY29wZS5jbGFzc0RhdGFbZGF0YXNldF0udXJsLCBsaW5rcyk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KFwiY2FuJ3QgYWNjZXNzIHRvIG15IGNsYXNzXCIpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShkLmhlYWRlci5Mb2NhdGlvbik7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICBcbiAgICAgICRpb25pY0xvYWRpbmcuc2hvdyh7dGVtcGxhdGU6ICc8aW9uLXNwaW5uZXIgaWNvbj1cImFuZHJvaWRcIiBjbGFzcz1cIm92ZXJsYXktc3Bpbm5lclwiPjwvaW9uLXNwaW5uZXI+IExvYWRpbmcuLi4nfSk7XG5cbiAgICAgIGdldENsYXNzRGV0YWlsKCRzY29wZS5jbGFzc0RhdGFbZGF0YXNldF0udXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgJHNjb3BlLmNsYXNzRGF0YVtkYXRhc2V0XS5kZXRhaWwgPSBkYXRhO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5teUNsYXNzID0gSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmNsYXNzRGF0YSk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseUFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLnN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5zdGF0ZS5pc0RhdGEgPSAkc2NvcGUuY2xhc3NEYXRhW2RhdGFzZXRdLmRldGFpbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAkaW9uaWNTY3JvbGxEZWxlZ2F0ZS5yZXNpemUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24obXNnKSB7XG4gICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgZXJySGFuZGxlKG1zZyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuICB9KTtcbiIsIi8qKlxuICogU2NoZWR1bGUgQ29udHJvbGxlclxuICogQGF1dGhvciBOYXVmYWwgPG5hdWZhbEBtYXJ0YWJha2FuZy51cz5cbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ1NjaGVkdWxlQ29udHJvbGxlcicsXG4gIGZ1bmN0aW9uKCRzY29wZSwgJGlvbmljUG9wdXAsICR0aW1lb3V0LCAkaW9uaWNIaXN0b3J5LCAkcm9vdFNjb3BlLCAkaW9uaWNQbGF0Zm9ybSwgQmludXNNYXlhLCAkcSwgJGh0dHAsICRpb25pY0xvYWRpbmcpIHtcblxuICAgICRyb290U2NvcGUubm9IZWFkZXIgPSBmYWxzZTtcbiAgICAkcm9vdFNjb3BlLmxlZnRNZW51ID0gdHJ1ZTtcbiAgICAkaW9uaWNQbGF0Zm9ybS5vbkhhcmR3YXJlQmFja0J1dHRvbihmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuZ2V0U3RhdGUgPSBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgdG9kYXkgPSBtb21lbnQoKTtcbiAgICAgIC8vdG9kYXlcbiAgICAgIGlmIChtb21lbnQoZCkuaXNTYW1lKHRvZGF5LCAnZGF5JykpIHtcbiAgICAgICAgcmV0dXJuICd0b2RheSc7XG4gICAgICB9IGVsc2VcbiAgICAgIC8vdG9tb3Jyb3dcbiAgICAgIGlmIChtb21lbnQoZCkuaXNTYW1lKHRvZGF5LmFkZCgxLCAnZCcpLCAnZGF5JykpIHtcbiAgICAgICAgcmV0dXJuICd0b21vcnJvdyc7XG4gICAgICB9IGVsc2VcbiAgICAgIC8vbGFzdGVkXG4gICAgICBpZiAobW9tZW50KGQpIDwgdG9kYXkpIHtcbiAgICAgICAgcmV0dXJuICdjb21wbGV0byc7XG4gICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS5nZXRDb3Vyc2VTdGF0ZSA9IGZ1bmN0aW9uKGQsIG0pIHtcbiAgICAgIHZhciBub3cgPSBtb21lbnQoKSxcbiAgICAgICAgZ2V0TW9tZW50ID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBnZXRMYXN0ID0gbS5zcGxpdChcIi1cIilbMV0uc3BsaXQoXCI6XCIpLFxuICAgICAgICAgIGdldEhvdXIgPSBwYXJzZUludChnZXRMYXN0WzBdKSxcbiAgICAgICAgICBnZXRNaW51dGUgPSBwYXJzZUludChnZXRMYXN0WzFdKTtcblxuICAgICAgICBnZXRNb21lbnQgPSBtb21lbnQoZCkuaG91cihnZXRIb3VyKS5taW51dGUoZ2V0TWludXRlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZ2V0TW9tZW50ID0gbW9tZW50KGQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2V0TW9tZW50IDwgbm93KSB7XG4gICAgICAgIHJldHVybiAnY29tcGxldG8nO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUuaXNTY2hlZHVsZSA9IGZhbHNlO1xuICAgICRzY29wZS5zY2hlZHVsZSA9IFtdO1xuXG4gICAgdmFyIHRvSnNvbiA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBoYXNpbCA9IFtdO1xuICAgICAgJChkYXRhKS5maW5kKCd0cicpLmVhY2goZnVuY3Rpb24oaSwgYSkge1xuICAgICAgICB2YXIgaHQgPSAkKHRoaXMpLmZpbmQoJ3RkJyk7XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGh0LmVxKDMpLmh0bWwoKS5tYXRjaCgvKC4qKS0oLiopLyk7XG4gICAgICAgICAgaGFzaWwucHVzaCh7XG4gICAgICAgICAgICBkYXRlOiBodC5lcSgwKS5odG1sKCksXG4gICAgICAgICAgICB0aW1lOiBodC5lcSgxKS5odG1sKCksXG4gICAgICAgICAgICBzdGF0ZTogaHQuZXEoMikuaHRtbCgpLFxuICAgICAgICAgICAgY291cnNlOiBtYXRjaFsyXSxcbiAgICAgICAgICAgIGNvZGU6IG1hdGNoWzFdLFxuICAgICAgICAgICAgbXlDbGFzczogaHQuZXEoNSkuaHRtbCgpLFxuICAgICAgICAgICAgcm9vbTogaHQuZXEoNikuaHRtbCgpLFxuICAgICAgICAgICAgYnVpbGRpbmc6IGh0LmVxKDcpLmh0bWwoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBoYXNpbDtcbiAgICB9O1xuXG4gICAgdmFyIHJlZnJlc2hKYWR3YWwgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJldHVyblJlc3BvbnNlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHZhciBfc2NoZWR1bGUgPSAkKGRhdGEpLmZpbmQoXCJ0YWJsZVwiKSxcbiAgICAgICAgICAgICAgdG9kYXkgPSB0b0pzb24oX3NjaGVkdWxlLmVxKDApLmh0bWwoKSksXG4gICAgICAgICAgICAgIG5leHQgPSB0b0pzb24oX3NjaGVkdWxlLmVxKDEpLmh0bWwoKSksXG4gICAgICAgICAgICAgIHNrZWR1bCA9IHRvZGF5LmNvbmNhdChuZXh0KSxcbiAgICAgICAgICAgICAgamFkd2FsID0gQmludXNNYXlhLmdyb3VwaW5nKHNrZWR1bCk7XG4gICAgICAgICAgICBpZihqYWR3YWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UuamFkd2FsID0gSlNPTi5zdHJpbmdpZnkoamFkd2FsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5sYXN0VXBkYXRlID0gbW9tZW50KCkuZm9ybWF0KCdEIE1NTU0gWVlZWSBoOm1tOnNzJyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBqYWR3YWw6IGphZHdhbCwgbGFzdFVwZGF0ZTogbG9jYWxTdG9yYWdlLmxhc3RVcGRhdGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYodHlwZW9mIGh0dHBjbGllbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAkaHR0cC5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MjUwNS9zY2hlZHVsZS5odG1sJylcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJldHVyblJlc3BvbnNlKGQuZGF0YSkpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQmludXNNYXlhLmNoZWNrTG9naW4oKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBCaW51c01heWEuYXBpKCcvJywgJ2dldCcpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIC8vIEZhaWwgdG8gcmUtbG9naW5cbiAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChcImNhbid0IHJlLWF1dGggeW91ciBhY2NvdW50XCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIExvYWQgVGhlc2UgUGFnZVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICByZXR1cm4gQmludXNNYXlhLmZyYW1lKFxuICAgICAgICAgICAgICAgICQoZC5yZXN1bHQpLmZpbmQoXCIuaXRlbUNvbnRlbnQgdWwgbGk6ZXEoMCkgPiBhXCIpLmF0dHIoXCJocmVmXCIpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChcImNhbid0IGFjY2VzcyB0byBtYWluIGZyYW1lXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fSxcbiAgICAgICAgICAgICAgICBkID0gYy5yZXN1bHQ7XG4gICAgICAgICAgICAgICQoJChkLnJlc3VsdCkuc2VyaWFsaXplQXJyYXkoKSkuZWFjaChmdW5jdGlvbihpLCBkKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtkLm5hbWVdID0gZC52YWx1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGRhdGEuX19FVkVOVFRBUkdFVCA9ICdjdGwwMCRDb250ZW50UGxhY2VIb2xkZXIxJGJ0blNjaGVkdWxlJztcbiAgICAgICAgICAgICAgcmV0dXJuIEJpbnVzTWF5YS5hcGkoX2JpbWF5X2FwaV91cmwgKyAnL0xNUy9NeUNsYXNzLmFzcHgnLCAncG9zdCcsIGRhdGEsIHRydWUpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoXCJjYW4ndCBhY2Nlc3MgdG8gc2NoZWR1bGUgcGFnZVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuUmVzcG9uc2UoZC5yZXN1bHQpKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZG9SZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWZyZXNoSmFkd2FsKClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdzY3JvbGwucmVmcmVzaENvbXBsZXRlJyk7XG4gICAgICAgICRyb290U2NvcGUuZ2V0TGFzdFVwZGF0ZSgpO1xuICAgICAgICAkc2NvcGUuaXNTY2hlZHVsZSA9IHRydWU7XG4gICAgICAgICRzY29wZS5zY2hlZHVsZSA9IGRhdGEuamFkd2FsO1xuICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICBlcnJIYW5kbGUoZSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGVyckhhbmRsZSA9IGZ1bmN0aW9uKG1zZykge1xuICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgJGlvbmljUG9wdXAuYWxlcnQoe1xuICAgICAgICAgIHRpdGxlOiAnT29wcyAhJyxcbiAgICAgICAgICB0ZW1wbGF0ZTogbXNnXG4gICAgICAgIH0pO1xuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc2Nyb2xsLnJlZnJlc2hDb21wbGV0ZScpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgaWYgKGxvY2FsU3RvcmFnZS5qYWR3YWwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5qYWR3YWwpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkc2NvcGUuaXNTY2hlZHVsZSA9IHRydWU7XG4gICAgICAgICAgJHNjb3BlLnNjaGVkdWxlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuamFkd2FsKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICRpb25pY1BsYXRmb3JtLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICAkaW9uaWNMb2FkaW5nLnNob3coe3RlbXBsYXRlVXJsOiAndmlld3MvbW9kdWxlL2xvYWRpbmcuaHRtbCcsbm9CYWNrZHJvcDogdHJ1ZX0pO1xuICAgICAgICAkc2NvcGUuZG9SZWZyZXNoKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfSk7XG4iLCIvKipcbiAqIFNlcnZpY2VzIENvbnRyb2xsZXJcbiAqIEBhdXRob3IgUGVkb3ggPG5hdWZhbEBtYXJ0YWJha2FuZy51cz5cbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ1NlcnZpY2VzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ0JpbnVzTWF5YScsICckaW9uaWNOYXZCYXJEZWxlZ2F0ZScsXG5mdW5jdGlvbigkc2NvcGUsIEJpbnVzTWF5YSwgJGlvbmljTmF2QmFyRGVsZWdhdGUpIHtcblxufV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
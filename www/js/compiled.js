var view_path="views/",pcolor="#1C536F",_bimay_url="http://binusmaya.binus.ac.id",_bimay_api_url="http://apps.binusmaya.binus.ac.id",app=angular.module("BinusMaya",["ionic","listRoute","BinusMayaFactory"]).run(["$ionicPlatform","$rootScope","$ionicHistory","$ionicNavBarDelegate","BinusMaya",function(e,t,a,o,n){t.login="undefined"==typeof localStorage.islogin?!1:localStorage.islogin,t.leftMenu=!1,t.loginName="undefined"==typeof localStorage.fname?null:localStorage.fname.toLowerCase(),t.profileImage="undefined"==typeof localStorage.profileImage?!1:localStorage.profileImage,delete localStorage.cookie,delete localStorage.templogin,e.ready(function(){t.onLoadStyle={opacity:1},window.cordova&&window.cordova.plugins.Keyboard&&cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&StatusBar.styleDefault()}),t.getLastUpdate=function(){t.lastUpdate="undefined"==typeof localStorage.lastUpdate?"Whatever":localStorage.lastUpdate},t.getLastUpdate(),t.logout=function(){localStorage.clear(),window.location.hash="#/",a.clearHistory(),o.showBackButton(!1),location.reload()},t.getProfileImage=function(){n.getProfileImage(function(e){localStorage.profileImage=e,t.profileImage=e},function(){})},window.location.hash=t.login?"/schedule":"/"}]).config(["$ionicConfigProvider",function(e){e.views.forwardCache(!1),e.views.maxCache(0)}]);angular.module("BinusMayaFactory",[]).factory("BinusMaya",["$q",function(e){return{_bimay_url:"http://binusmaya.binus.ac.id",_bimay_api_url:"http://apps.binusmaya.binus.ac.id",headers:function(){var e=this;return{Cookie:localStorage.cookie?localStorage.cookie:null,Origin:e._bimay_url,Referer:e._bimay_url}},checkLogin:function(){var t=this,a=JSON.parse(localStorage.loginId);return e(function(e,o){return localStorage.templogin!==!0?t.api("/","get").then(function(e){200!==e.code&&o(e);var n={};return $($(e.result).serializeArray()).each(function(e,t){n[t.name]=t.value}),n.txtUserId=a.binusid,n.txtPassword=a.password,n.btnLogin="Log In ",t.api("/","post",n)},o).then(function(){localStorage.templogin=!0,e(!0)},o):(e(!0),void 0)})},api:function(t,a,o,n){var i=this;return void 0===localStorage.cookie?i._getCookie().then(function(){return i.api(t,a,o)}):e(function(e,l){"get"===a?httpclient.get(n?t:i._bimay_url+t,e,l,{headers:i.headers()}):httpclient.post(n?t:i._bimay_url+t,o,e,l,{headers:i.headers()})})},frame:function(t){var a=this,o="";return e(function(e,n){return a.api(t,"get").then(function(e){return a.api($(e.result).find("#ctl00_cp1_ifrApp").attr("src"),"get")},n).then(function(e){return o=$(e.result).find("#ifrApp").attr("src"),a.api(o,"get",{},!0)},n).then(function(t){e({url:o,result:t})},n)})},_getCookie:function(){var t=this;return e(function(e,a){httpclient.get(t._bimay_url,function(t){200==t.code?(localStorage.cookie=t.header["Set-Cookie"],e(!0)):a(t)},e)})},_requestError:function(){},grouping:function(e){if(e.length<=0)return[];var t=[],a="",o=-1,n=0;return e.forEach(function(e){a==e.date?(t[o].data[n]=e,n++):(n=1,o++,a=e.date,t[o]={date:e.date,data:[]},t[o].data[0]=e)}),t}}}]),angular.module("listRoute",[]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("index",{url:"/",views:{"main-view":{templateUrl:view_path+"login.html"}}}).state("schedule",{url:"/schedule",views:{"main-view":{templateUrl:view_path+"schedule.html",controller:"ScheduleController"}}}).state("about",{url:"/about",views:{"main-view":{templateUrl:view_path+"about.html"}}}).state("forum",{url:"/forum",views:{"main-view":{templateUrl:view_path+"forum.html",controller:"ForumController"}}}).state("services",{url:"/services",views:{"main-view":{templateUrl:view_path+"services/index.html",controller:"ServicesController"}}}).state("myclass",{url:"/myclass",views:{"main-view":{templateUrl:view_path+"myclass.html",controller:"MyClassController"}}}).state("myclassDetail",{url:"/myclass-detail/:code",resolve:{dataset:["$q","$stateParams","$location",function(e,t,a){var o=!1,n=e.defer(),i="undefined"!=typeof localStorage.myClass?JSON.parse(localStorage.myClass):!1;for(var l in i)i[l].code==t.code&&(o=l);return o?n.resolve(o):a.path("/myclass").replace(),n.promise}]},views:{"main-view":{templateUrl:view_path+"myclassInside.html",controller:"MyClassDetailController"}}}).state("examSchedule",{url:"/exam-schedule",views:{"main-view":{templateUrl:view_path+"services/exam-schedule.html",controller:"ExamScheduleController"}}}).state("examScore",{url:"/exam-score",views:{"main-view":{templateUrl:view_path+"services/exam-score.html",controller:"ExamScoreController"}}}).state("financeStatus",{url:"/finance-status",views:{"main-view":{templateUrl:view_path+"services/billing.html",controller:"FinanceController"}}}).state("absence",{url:"/absence",views:{"main-view":{templateUrl:view_path+"services/absence.html",controller:"AbsenceController"}}}).state("coming",{url:"/coming",views:{"main-view":{templateUrl:view_path+"coming.html"}}}),t.otherwise("/coming")}]),app.controller("LoginController",["$scope","$ionicPopup","$timeout","$ionicHistory","$ionicNavBarDelegate","$rootScope","BinusMaya",function(e,t,a,o,n,i,l){i.noHeader=!0,n.showBar(!1),e.loading=!1,e.loginClass="",o.nextViewOptions({disableBack:!0}),e.submit=function(){if(e.binusid&&e.password){e.loginClass="on-loading",e.loading=!0,l.api("/","get").then(function(t){200!==t.code&&a(t);var o={};return $($(t.result).serializeArray()).each(function(e,t){o[t.name]=t.value}),o.txtUserId=e.binusid,o.txtPassword=e.password,o.btnLogin="Log In ",l.api("/","post",o)},a).then(function(t){var l=$(t.result).find("#content #topbar .right strong");200!==t.code&&a(t),l.length<=0?a(t,$(t.result).find("#lblError").text()):(e.loading=!1,e.loginClass="",localStorage.loginId=JSON.stringify({binusid:e.binusid,password:e.password}),localStorage.islogin=!0,localStorage.fname=l.text(),i.login=!0,i.loginName=localStorage.fname.toLowerCase(),e.loginClass="",e.loading=!1,window.location.hash="#/schedule",o.clearHistory(),n.showBackButton(!1))},a);var a=function(a,o){e.loading=!1,e.loginClass="",t.alert({title:"Oops !",template:o?o:"Something wrong !"})}}else t.alert({title:"Oops !",template:"Please Input Binusian ID and Password"})}}]),app.controller("MyClassController",["$scope","BinusMaya","$ionicNavBarDelegate","$state","$location","$stateParams","$timeout","$rootScope","$ionicPlatform","$q","$ionicPopup",function(e,t,a,o,n,i,l,r,s,c,u){r.noHeader=!1,r.leftMenu=!0,s.onHardwareBackButton(function(e){e.preventDefault()}),e.classData="undefined"!=typeof localStorage.myClass?JSON.parse(localStorage.myClass):!1;var d=function(){return c(function(e,a){t.checkLogin().then(function(){return t.api("/","get")},function(){a("can't re-auth your account")}).then(function(e){return t.frame($(e.result).find(".itemContent ul li:eq(0) > a").attr("href"))},function(){a("can't access to main frame")}).then(function(t){var a=[];$(t.result.result).find("#ctl00_ContentPlaceHolder1_pnlTeori ul li").each(function(e,t){var o=$(t).find("a").html(),n=o.match(/^(.*)-(.*) \((.*)\)/i);a.push({indexItem:e,name:n[2],url:$(t).find("a").attr("href"),code:n[1],className:n[3]})}),localStorage.myClass=JSON.stringify(a),e(a)},function(){a("can't access to my class")})})};e.doRefresh=function(){d().then(function(a){a.length>0?e.classData=a:t("You don't have any class"),e.$broadcast("scroll.refreshComplete")},t);var t=function(t){u.alert({title:"Oops !",template:t}),e.$broadcast("scroll.refreshComplete")}}}]),app.controller("MyClassDetailController",["$scope","BinusMaya","$ionicNavBarDelegate","$state","$location","$stateParams","$timeout","$rootScope","$ionicPlatform","$q","$ionicPopup","dataset",function(e,t,a,o,n,i,l,r,s,c,u,d){e.classData="undefined"!=typeof localStorage.myClass?JSON.parse(localStorage.myClass):!1,e.state={isData:!1,loading:!0},e.data=e.classData[d],e.infoTab="active",e.topicsTab="";var m=function(e){return c(function(a,o){t.checkLogin().then(function(){return t.api("/","get")},function(){o("can't re-auth your account")}).then(function(e){return t.frame($(e.result).find(".itemContent ul li:eq(0) > a").attr("href"))},function(){o("can't access to main frame")}).then(function(){return console.log(),t.api(_bimay_api_url+"/LMS/"+e,"get",{},!0)},function(){o("can't access to my class")}).then(function(e){var t=e.result,o=$(t).find("#desc_course_desc > span").html(),n=$(t).find("#desc_grad_compete > span").html(),i=[];$(t).find("#ctl00_ContentPlaceHolder1_pnlContentTheory table tbody tr").each(function(e,t){0!==e&&i.push({session:parseInt($(t).find("td:eq(0) > span").html()),mode:$(t).find("td:eq(1) > span").html(),topics:$(t).find("td:eq(2) > a").html(),date:$(t).find("td:eq(3) > span").html(),links:$(t).find("td:eq(4) > input").attr("name")})});var l={main_description:o,grad_description:n,course:i};a(l)},function(){o("can't access to course page")})})};"undefined"==typeof e.classData[d].detail?m(e.classData[d].url).then(function(t){e.classData[d].detail=t,localStorage.myClass=JSON.stringify(e.classData),e.$applyAsync(function(){e.state.loading=!1,e.state.isData=e.classData[d].detail}),e.$broadcast("scroll.refreshComplete")},f):(e.state.loading=!1,e.state.isData=e.classData[d].detail),e.isPageTopic===!1?(e.infoTab="active",e.topicsTab=""):(e.infoTab="",e.topicsTab="active"),e.switchTab=function(t){0===t&&(e.isPageTopic=!1,e.infoTab="active",e.topicsTab=""),1===t&&(e.isPageTopic=!0,e.infoTab="",e.topicsTab="active")};var f=function(t){u.alert({title:"Oops !",template:t}),e.$broadcast("scroll.refreshComplete")}}]),app.controller("ScheduleController",["$scope","$ionicPopup","$timeout","$ionicHistory","$rootScope","$ionicPlatform","BinusMaya","$q",function(e,t,a,o,n,i,l,r){if(n.noHeader=!1,n.leftMenu=!0,i.onHardwareBackButton(function(e){e.preventDefault()}),e.getState=function(e){var t=moment();return moment(e).isSame(t,"day")?"today":moment(e).isSame(t.add(1,"d"),"day")?"tomorrow":moment(e)<t?"completo":void 0},e.getCourseState=function(e,t){var a=moment(),o=null;try{var n=t.split("-")[1].split(":"),i=parseInt(n[0]),l=parseInt(n[1]);o=moment(e).hour(i).minute(l)}catch(r){o=moment(e)}return a>o?"completo":void 0},e.isSchedule=!1,e.schedule=[],localStorage.jadwal)try{JSON.parse(localStorage.jadwal).length>0&&(e.isSchedule=!0,e.schedule=JSON.parse(localStorage.jadwal))}catch(s){}var c=function(e){var t=[];return $(e).find("tr").each(function(e){var a=$(this).find("td");e>0&&t.push({date:a.eq(0).html(),time:a.eq(1).html(),state:a.eq(2).html(),course:a.eq(3).html().split("-")[1],code:a.eq(3).html().split("-")[0],myClass:a.eq(5).html(),room:a.eq(6).html(),building:a.eq(7).html()})}),t},u=function(){return r(function(e,t){l.checkLogin().then(function(){return l.api("/","get")},function(){t("can't re-auth your account")}).then(function(e){return l.frame($(e.result).find(".itemContent ul li:eq(0) > a").attr("href"))},function(){t("can't access to main frame")}).then(function(e){var t={},a=e.result;return $($(a.result).serializeArray()).each(function(e,a){t[a.name]=a.value}),t.__EVENTTARGET="ctl00$ContentPlaceHolder1$btnSchedule",l.api(_bimay_api_url+"/LMS/MyClass.aspx","post",t,!0)},function(){t("can't access frame")}).then(function(t){console.log(t);var a=$(t.result).find("table"),o=c(a.eq(0).html()),n=c(a.eq(1).html()),i=o.concat(n);localStorage.jadwal=JSON.stringify(l.grouping(i)),localStorage.lastUpdate=moment().format("D MMMM YYYY h:mm:ss"),e({jadwal:JSON.parse(localStorage.jadwal),lastUpdate:localStorage.lastUpdate})},function(){t("can't access schedule page")})})};e.doRefresh=function(){u().then(function(t){console.log(t),e.$broadcast("scroll.refreshComplete"),n.getLastUpdate(),t.jadwal.length>0?(e.isSchedule=!0,e.schedule=t.jadwal):a("No Schedule found")},a);var a=function(a){t.alert({title:"Oops !",template:a}),e.$broadcast("scroll.refreshComplete")}}}]);
//# sourceMappingURL=data:application/json;base64,